/* -*- C++ -*- */
/* Generated by E:\PROJECTS\OPENDDS\ext\OpenDDS\bin\opendds_idl version 3.13.2 (ACE version 6.2a_p15) running on input file TestPInvokeIdl.idl */
#ifndef OPENDDS_IDL_GENERATED_TESTPINVOKEIDLTYPESUPPORTIMPL_H_83RLBX
#define OPENDDS_IDL_GENERATED_TESTPINVOKEIDLTYPESUPPORTIMPL_H_83RLBX
#include "TestPInvokeIdlC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "TestPInvokeIdlTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: Current */


/* End INTERFACE: Current */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyType */


/* End TYPEDEF: PolicyType */


/* Begin INTERFACE-FWD: Policy */


/* End INTERFACE-FWD: Policy */


/* Begin TYPEDEF: PolicyList */


/* End TYPEDEF: PolicyList */


/* Begin TYPEDEF: PolicyTypeSeq */


/* End TYPEDEF: PolicyTypeSeq */


/* Begin INTERFACE-FWD: PolicyCurrent */


/* End INTERFACE-FWD: PolicyCurrent */


/* Begin ENUM: SetOverrideType */


/* End ENUM: SetOverrideType */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyErrorCode */


/* End TYPEDEF: PolicyErrorCode */


/* Begin CONST: BAD_POLICY */


/* End CONST: BAD_POLICY */


/* Begin CONST: UNSUPPORTED_POLICY */


/* End CONST: UNSUPPORTED_POLICY */


/* Begin CONST: BAD_POLICY_TYPE */


/* End CONST: BAD_POLICY_TYPE */


/* Begin CONST: BAD_POLICY_VALUE */


/* End CONST: BAD_POLICY_VALUE */


/* Begin CONST: UNSUPPORTED_POLICY_VALUE */


/* End CONST: UNSUPPORTED_POLICY_VALUE */


/* Begin INTERFACE: Policy */


/* End INTERFACE: Policy */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyManager */


/* End INTERFACE: PolicyManager */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyCurrent */


/* End INTERFACE: PolicyCurrent */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ServiceType */


/* End TYPEDEF: ServiceType */


/* Begin TYPEDEF: ServiceOption */


/* End TYPEDEF: ServiceOption */


/* Begin TYPEDEF: ServiceDetailType */


/* End TYPEDEF: ServiceDetailType */


/* Begin TYPEDEF: ServiceDetailData */


/* End TYPEDEF: ServiceDetailData */


/* Begin TYPEDEF: ServiceOptionSeq */


/* End TYPEDEF: ServiceOptionSeq */


/* Begin CONST: Security */


/* End CONST: Security */


/* Begin STRUCT: ServiceDetail */


/* End STRUCT: ServiceDetail */


/* Begin TYPEDEF: ServiceDetailSeq */


/* End TYPEDEF: ServiceDetailSeq */


/* Begin STRUCT: ServiceInformation */


/* End STRUCT: ServiceInformation */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: ParameterMode */


/* End ENUM: ParameterMode */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ORBid */


/* End TYPEDEF: ORBid */


/* Begin TYPEDEF: Flags */


/* End TYPEDEF: Flags */


/* Begin TYPEDEF: Identifier */


/* End TYPEDEF: Identifier */


/* Begin TYPEDEF: RepositoryId */


/* End TYPEDEF: RepositoryId */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: TCKind */


/* End ENUM: TCKind */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin STRUCT: NamedValue */


/* End STRUCT: NamedValue */


/* Begin ENUM: exception_type */


/* End ENUM: exception_type */


/* Begin NATIVE: ValueFactory */


/* End NATIVE: ValueFactory */

/* End MODULE: CORBA */


/* Begin MODULE: Test */



/* Begin ENUM: PrimitiveEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::PrimitiveEnum& enumval);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::PrimitiveEnum& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_Test_PrimitiveEnum_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: PrimitiveEnum */


/* Begin STRUCT: NestedTestStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::NestedTestStruct& stru, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::NestedTestStruct& stru);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::NestedTestStruct& stru);

TestPInvokeIdlIDL_Export
size_t gen_max_marshaled_size(const Test::NestedTestStruct& stru, bool align);

TestPInvokeIdlIDL_Export
size_t gen_max_marshaled_size(KeyOnly<const Test::NestedTestStruct> stru, bool align);

TestPInvokeIdlIDL_Export
void gen_find_size(KeyOnly<const Test::NestedTestStruct> stru, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, KeyOnly<const Test::NestedTestStruct> stru);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, KeyOnly<Test::NestedTestStruct> stru);

template <>
struct MarshalTraits<Test::NestedTestStruct> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct TestPInvokeIdlIDL_Export NestedTestStruct_OpenDDS_KeyLessThan {
  bool operator()(const Test::NestedTestStruct&, const Test::NestedTestStruct&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Test {
class NestedTestStructTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Test::NestedTestStruct> {
  typedef Test::NestedTestStruct MessageType;
  typedef Test::NestedTestStructSeq MessageSequenceType;
  typedef Test::NestedTestStructTypeSupport TypeSupportType;
  typedef Test::NestedTestStructTypeSupportImpl TypeSupportTypeImpl;
  typedef Test::NestedTestStructDataWriter DataWriterType;
  typedef Test::NestedTestStructDataReader DataReaderType;
  typedef Test::NestedTestStruct_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Test::NestedTestStruct"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
class TestPInvokeIdlIDL_Export NestedTestStructTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<NestedTestStructTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<NestedTestStruct> TraitsType;
  typedef NestedTestStructTypeSupport TypeSupportType;
  typedef NestedTestStructTypeSupport::_var_type _var_type;
  typedef NestedTestStructTypeSupport::_ptr_type _ptr_type;

  NestedTestStructTypeSupportImpl() {}
  virtual ~NestedTestStructTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static NestedTestStructTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
TestPInvokeIdlIDL_Export
const MetaStruct& getMetaStruct<Test::NestedTestStruct>();
TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::NestedTestStruct*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: NestedTestStruct */


/* Begin TYPEDEF: LongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::LongList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::LongList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::LongList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::LongList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongList */


/* Begin TYPEDEF: StringList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::StringList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::StringList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::StringList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::StringList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StringList */


/* Begin TYPEDEF: WStringList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::WStringList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::WStringList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::WStringList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::WStringList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WStringList */


/* Begin TYPEDEF: StructList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::StructList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::StructList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::StructList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::StructList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StructList */


/* Begin TYPEDEF: ArrayLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayLong */


/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayString_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayString_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayString_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayString_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayString */


/* Begin TYPEDEF: ArrayWString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayWString_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayWString_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayWString_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayWString_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayWString */


/* Begin TYPEDEF: ArrayStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayStruct_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayStruct_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayStruct_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayStruct_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayStruct */


/* Begin TYPEDEF: MultiArrayLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayLong */


/* Begin TYPEDEF: MultiArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayString_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayString_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayString_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayString_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayString */


/* Begin TYPEDEF: MultiArrayWString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayWString_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayWString_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayWString_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayWString_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayWString */


/* Begin TYPEDEF: MultiArrayStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayStruct_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayStruct_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayStruct_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayStruct_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayStruct */


/* Begin TYPEDEF: ArrayFloat */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayFloat_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayFloat_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayFloat_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayFloat_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayFloat */


/* Begin TYPEDEF: ArrayDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayDouble_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayDouble_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayDouble_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayDouble_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayDouble */


/* Begin TYPEDEF: ArrayLongDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayLongDouble_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayLongDouble_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayLongDouble_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayLongDouble_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayLongDouble */


/* Begin TYPEDEF: FloatList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::FloatList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::FloatList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::FloatList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::FloatList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FloatList */


/* Begin TYPEDEF: DoubleList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::DoubleList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::DoubleList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::DoubleList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::DoubleList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: DoubleList */


/* Begin TYPEDEF: LongDoubleList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::LongDoubleList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::LongDoubleList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::LongDoubleList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::LongDoubleList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongDoubleList */


/* Begin TYPEDEF: MultiArrayFloat */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayFloat_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayFloat_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayFloat_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayFloat_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayFloat */


/* Begin TYPEDEF: MultiArrayDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayDouble_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayDouble_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayDouble_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayDouble_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayDouble */


/* Begin TYPEDEF: MultiArrayLongDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayLongDouble_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayLongDouble_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayLongDouble_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayLongDouble_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayLongDouble */


/* Begin TYPEDEF: ArrayChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayChar_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayChar_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayChar_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayChar_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayChar */


/* Begin TYPEDEF: ArrayWChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayWChar_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayWChar_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayWChar_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayWChar_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayWChar */


/* Begin TYPEDEF: CharList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::CharList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::CharList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::CharList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::CharList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: CharList */


/* Begin TYPEDEF: WCharList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::WCharList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::WCharList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::WCharList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::WCharList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WCharList */


/* Begin TYPEDEF: MultiArrayChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayChar_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayChar_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayChar_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayChar_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayChar */


/* Begin TYPEDEF: MultiArrayWChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayWChar_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayWChar_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayWChar_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayWChar_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayWChar */


/* Begin TYPEDEF: ArrayShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayShort_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayShort_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayShort_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayShort_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayShort */


/* Begin TYPEDEF: ArrayLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayLongLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayLongLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayLongLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayLongLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayLongLong */


/* Begin TYPEDEF: ArrayUnsignedShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayUnsignedShort_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayUnsignedShort_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayUnsignedShort_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayUnsignedShort_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayUnsignedShort */


/* Begin TYPEDEF: ArrayUnsignedLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayUnsignedLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayUnsignedLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayUnsignedLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayUnsignedLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayUnsignedLong */


/* Begin TYPEDEF: ArrayUnsignedLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayUnsignedLongLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayUnsignedLongLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayUnsignedLongLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayUnsignedLongLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayUnsignedLongLong */


/* Begin TYPEDEF: ShortList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ShortList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ShortList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ShortList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ShortList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ShortList */


/* Begin TYPEDEF: LongLongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::LongLongList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::LongLongList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::LongLongList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::LongLongList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongLongList */


/* Begin TYPEDEF: UnsignedShortList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::UnsignedShortList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::UnsignedShortList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::UnsignedShortList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::UnsignedShortList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedShortList */


/* Begin TYPEDEF: UnsignedLongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::UnsignedLongList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::UnsignedLongList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::UnsignedLongList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::UnsignedLongList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedLongList */


/* Begin TYPEDEF: UnsignedLongLongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::UnsignedLongLongList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::UnsignedLongLongList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::UnsignedLongLongList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::UnsignedLongLongList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedLongLongList */


/* Begin TYPEDEF: MultiArrayShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayShort_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayShort_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayShort_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayShort_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayShort */


/* Begin TYPEDEF: MultiArrayLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayLongLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayLongLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayLongLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayLongLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayLongLong */


/* Begin TYPEDEF: MultiArrayUnsignedShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayUnsignedShort_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayUnsignedShort_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayUnsignedShort_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayUnsignedShort_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayUnsignedShort */


/* Begin TYPEDEF: MultiArrayUnsignedLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayUnsignedLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayUnsignedLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayUnsignedLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayUnsignedLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayUnsignedLong */


/* Begin TYPEDEF: MultiArrayUnsignedLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayUnsignedLongLong_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayUnsignedLongLong_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayUnsignedLongLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayUnsignedLongLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayUnsignedLongLong */


/* Begin TYPEDEF: ArrayBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayBoolean_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayBoolean_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayBoolean_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayBoolean_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayBoolean */


/* Begin TYPEDEF: ArrayOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayOctet_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayOctet_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayOctet_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayOctet_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOctet */


/* Begin TYPEDEF: BooleanList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::BooleanList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::BooleanList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::BooleanList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::BooleanList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BooleanList */


/* Begin TYPEDEF: OctetList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::OctetList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::OctetList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::OctetList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::OctetList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetList */


/* Begin TYPEDEF: MultiArrayBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayBoolean_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayBoolean_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayBoolean_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayBoolean_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayBoolean */


/* Begin TYPEDEF: MultiArrayOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayOctet_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayOctet_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayOctet_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayOctet_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayOctet */


/* Begin TYPEDEF: ArrayEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::ArrayEnum_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::ArrayEnum_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::ArrayEnum_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::ArrayEnum_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayEnum */


/* Begin TYPEDEF: EnumList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::EnumList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::EnumList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::EnumList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::EnumList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: EnumList */


/* Begin TYPEDEF: MultiArrayEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::MultiArrayEnum_forany& arr, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::MultiArrayEnum_forany& arr);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::MultiArrayEnum_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::MultiArrayEnum_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayEnum */


/* Begin TYPEDEF: LongBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::LongBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::LongBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::LongBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::LongBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongBoundedList */


/* Begin TYPEDEF: StringBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::StringBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::StringBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::StringBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::StringBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StringBoundedList */


/* Begin TYPEDEF: WStringBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::WStringBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::WStringBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::WStringBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::WStringBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WStringBoundedList */


/* Begin TYPEDEF: StructBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::StructBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::StructBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::StructBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::StructBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StructBoundedList */


/* Begin TYPEDEF: LongDoubleBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::LongDoubleBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::LongDoubleBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::LongDoubleBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::LongDoubleBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongDoubleBoundedList */


/* Begin TYPEDEF: BooleanBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::BooleanBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::BooleanBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::BooleanBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::BooleanBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BooleanBoundedList */


/* Begin TYPEDEF: EnumBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::EnumBoundedList& seq, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::EnumBoundedList& seq);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::EnumBoundedList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::EnumBoundedList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: EnumBoundedList */


/* Begin STRUCT: BasicTestStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

TestPInvokeIdlIDL_Export
void gen_find_size(const Test::BasicTestStruct& stru, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, const Test::BasicTestStruct& stru);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, Test::BasicTestStruct& stru);

TestPInvokeIdlIDL_Export
size_t gen_max_marshaled_size(const Test::BasicTestStruct& stru, bool align);

TestPInvokeIdlIDL_Export
size_t gen_max_marshaled_size(KeyOnly<const Test::BasicTestStruct> stru, bool align);

TestPInvokeIdlIDL_Export
void gen_find_size(KeyOnly<const Test::BasicTestStruct> stru, size_t& size, size_t& padding);

TestPInvokeIdlIDL_Export
bool operator<<(Serializer& strm, KeyOnly<const Test::BasicTestStruct> stru);

TestPInvokeIdlIDL_Export
bool operator>>(Serializer& strm, KeyOnly<Test::BasicTestStruct> stru);

template <>
struct MarshalTraits<Test::BasicTestStruct> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct TestPInvokeIdlIDL_Export BasicTestStruct_OpenDDS_KeyLessThan {
  bool operator()(const Test::BasicTestStruct&, const Test::BasicTestStruct&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Test {
class BasicTestStructTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Test::BasicTestStruct> {
  typedef Test::BasicTestStruct MessageType;
  typedef Test::BasicTestStructSeq MessageSequenceType;
  typedef Test::BasicTestStructTypeSupport TypeSupportType;
  typedef Test::BasicTestStructTypeSupportImpl TypeSupportTypeImpl;
  typedef Test::BasicTestStructDataWriter DataWriterType;
  typedef Test::BasicTestStructDataReader DataReaderType;
  typedef Test::BasicTestStruct_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Test::BasicTestStruct"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
class TestPInvokeIdlIDL_Export BasicTestStructTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<BasicTestStructTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<BasicTestStruct> TraitsType;
  typedef BasicTestStructTypeSupport TypeSupportType;
  typedef BasicTestStructTypeSupport::_var_type _var_type;
  typedef BasicTestStructTypeSupport::_ptr_type _ptr_type;

  BasicTestStructTypeSupportImpl() {}
  virtual ~BasicTestStructTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static BasicTestStructTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
TestPInvokeIdlIDL_Export
const MetaStruct& getMetaStruct<Test::BasicTestStruct>();
TestPInvokeIdlIDL_Export
bool gen_skip_over(Serializer& ser, Test::BasicTestStruct*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: BasicTestStruct */

/* End MODULE: Test */
#endif /* OPENDDS_IDL_GENERATED_TESTPINVOKEIDLTYPESUPPORTIMPL_H_83RLBX */
