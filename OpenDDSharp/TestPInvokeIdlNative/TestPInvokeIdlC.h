// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:152

#ifndef _TAO_IDL_TESTPINVOKEIDLC_LWRD3K_H_
#define _TAO_IDL_TESTPINVOKEIDLC_LWRD3K_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TestPInvokeIdlIDL_Export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/PolicyC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/orb_typesC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TestPInvokeIdlIDL_Export

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:38

namespace Test
{

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_enum\enum_ch.cpp:47

  enum PrimitiveEnum
  {
    ENUM1,
    ENUM2,
    ENUM3,
    ENUM4,
    ENUM5,
    ENUM6,
    ENUM7,
    ENUM8,
    ENUM9,
    ENUM10,
    ENUM11,
    ENUM12
  };

  typedef PrimitiveEnum &PrimitiveEnum_out;

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:261

  struct NestedTestStruct;

  typedef
    ::TAO_Var_Var_T<
        NestedTestStruct
      >
    NestedTestStruct_var;

  typedef
    ::TAO_Out_T<
        NestedTestStruct
      >
    NestedTestStruct_out;

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:51

  struct TestPInvokeIdlIDL_Export NestedTestStruct
  {

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef NestedTestStruct_var _var_type;
    typedef NestedTestStruct_out _out_type;
    
    ::CORBA::Long Id;
    ::TAO::String_Manager Message;
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_LONGLIST_CH_)
#define _TEST_LONGLIST_CH_

  class LongList;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongList
      >
    LongList_var;

  typedef
    ::TAO_Seq_Out_T<
        LongList
      >
    LongList_out;

  class TestPInvokeIdlIDL_Export LongList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Long
          >
  {
  public:
    LongList (void);
    LongList ( ::CORBA::ULong max);
    LongList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
    LongList (const LongList &);
    virtual ~LongList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef LongList_var _var_type;
    typedef LongList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_STRINGLIST_CH_)
#define _TEST_STRINGLIST_CH_

  class StringList;

  typedef
    ::TAO_VarSeq_Var_T<
        StringList
      >
    StringList_var;

  typedef
    ::TAO_Seq_Out_T<
        StringList
      >
    StringList_out;

  class TestPInvokeIdlIDL_Export StringList
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    StringList (void);
    StringList ( ::CORBA::ULong max);
    StringList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    StringList (const StringList &);
    virtual ~StringList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef StringList_var _var_type;
    typedef StringList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_WSTRINGLIST_CH_)
#define _TEST_WSTRINGLIST_CH_

  class WStringList;

  typedef
    ::TAO_VarSeq_Var_T<
        WStringList
      >
    WStringList_var;

  typedef
    ::TAO_Seq_Out_T<
        WStringList
      >
    WStringList_out;

  class TestPInvokeIdlIDL_Export WStringList
    : public
        ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
  {
  public:
    WStringList (void);
    WStringList ( ::CORBA::ULong max);
    WStringList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::WChar ** buffer,
      ::CORBA::Boolean release = false);
    WStringList (const WStringList &);
    virtual ~WStringList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef WStringList_var _var_type;
    typedef WStringList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_STRUCTLIST_CH_)
#define _TEST_STRUCTLIST_CH_

  class StructList;

  typedef
    ::TAO_VarSeq_Var_T<
        StructList
      >
    StructList_var;

  typedef
    ::TAO_Seq_Out_T<
        StructList
      >
    StructList_out;

  class TestPInvokeIdlIDL_Export StructList
    : public
        ::TAO::unbounded_value_sequence<
            NestedTestStruct
          >
  {
  public:
    StructList (void);
    StructList ( ::CORBA::ULong max);
    StructList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      NestedTestStruct* buffer,
      ::CORBA::Boolean release = false);
    StructList (const StructList &);
    virtual ~StructList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef StructList_var _var_type;
    typedef StructList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Long ArrayLong[5];
  typedef ::CORBA::Long ArrayLong_slice;
  struct ArrayLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayLong,
        ArrayLong_slice,
        ArrayLong_tag
      >
    ArrayLong_var;

  typedef
    ArrayLong
    ArrayLong_out;

  typedef
    TAO_Array_Forany_T<
        ArrayLong,
        ArrayLong_slice,
        ArrayLong_tag
      >
    ArrayLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayLong_slice *
  ArrayLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayLong_free (
      ArrayLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayLong_slice *
  ArrayLong_dup (
      const ArrayLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayLong_copy (
      ArrayLong_slice *_tao_to,
      const ArrayLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::TAO::String_Manager ArrayString[10];
  typedef ::TAO::String_Manager ArrayString_slice;
  struct ArrayString_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayString,
        ArrayString_slice,
        ArrayString_tag
      >
    ArrayString_var;

  typedef
    TAO_Array_Out_T<
        ArrayString,
        ArrayString_var,
        ArrayString_slice,
        ArrayString_tag
      >
    ArrayString_out;

  typedef
    TAO_Array_Forany_T<
        ArrayString,
        ArrayString_slice,
        ArrayString_tag
      >
    ArrayString_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayString_slice *
  ArrayString_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayString_free (
      ArrayString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayString_slice *
  ArrayString_dup (
      const ArrayString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayString_copy (
      ArrayString_slice *_tao_to,
      const ArrayString_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::TAO::WString_Manager ArrayWString[4];
  typedef ::TAO::WString_Manager ArrayWString_slice;
  struct ArrayWString_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayWString,
        ArrayWString_slice,
        ArrayWString_tag
      >
    ArrayWString_var;

  typedef
    TAO_Array_Out_T<
        ArrayWString,
        ArrayWString_var,
        ArrayWString_slice,
        ArrayWString_tag
      >
    ArrayWString_out;

  typedef
    TAO_Array_Forany_T<
        ArrayWString,
        ArrayWString_slice,
        ArrayWString_tag
      >
    ArrayWString_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayWString_slice *
  ArrayWString_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayWString_free (
      ArrayWString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayWString_slice *
  ArrayWString_dup (
      const ArrayWString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayWString_copy (
      ArrayWString_slice *_tao_to,
      const ArrayWString_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef NestedTestStruct ArrayStruct[5];
  typedef NestedTestStruct ArrayStruct_slice;
  struct ArrayStruct_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayStruct,
        ArrayStruct_slice,
        ArrayStruct_tag
      >
    ArrayStruct_var;

  typedef
    TAO_Array_Out_T<
        ArrayStruct,
        ArrayStruct_var,
        ArrayStruct_slice,
        ArrayStruct_tag
      >
    ArrayStruct_out;

  typedef
    TAO_Array_Forany_T<
        ArrayStruct,
        ArrayStruct_slice,
        ArrayStruct_tag
      >
    ArrayStruct_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayStruct_slice *
  ArrayStruct_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayStruct_free (
      ArrayStruct_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayStruct_slice *
  ArrayStruct_dup (
      const ArrayStruct_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayStruct_copy (
      ArrayStruct_slice *_tao_to,
      const ArrayStruct_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Long MultiArrayLong[3][4][2];
  typedef ::CORBA::Long MultiArrayLong_slice[4][2];
  struct MultiArrayLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayLong,
        MultiArrayLong_slice,
        MultiArrayLong_tag
      >
    MultiArrayLong_var;

  typedef
    MultiArrayLong
    MultiArrayLong_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayLong,
        MultiArrayLong_slice,
        MultiArrayLong_tag
      >
    MultiArrayLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayLong_slice *
  MultiArrayLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayLong_free (
      MultiArrayLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayLong_slice *
  MultiArrayLong_dup (
      const MultiArrayLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayLong_copy (
      MultiArrayLong_slice *_tao_to,
      const MultiArrayLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::TAO::String_Manager MultiArrayString[3][4][2];
  typedef ::TAO::String_Manager MultiArrayString_slice[4][2];
  struct MultiArrayString_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        MultiArrayString,
        MultiArrayString_slice,
        MultiArrayString_tag
      >
    MultiArrayString_var;

  typedef
    TAO_Array_Out_T<
        MultiArrayString,
        MultiArrayString_var,
        MultiArrayString_slice,
        MultiArrayString_tag
      >
    MultiArrayString_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayString,
        MultiArrayString_slice,
        MultiArrayString_tag
      >
    MultiArrayString_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayString_slice *
  MultiArrayString_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayString_free (
      MultiArrayString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayString_slice *
  MultiArrayString_dup (
      const MultiArrayString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayString_copy (
      MultiArrayString_slice *_tao_to,
      const MultiArrayString_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::TAO::WString_Manager MultiArrayWString[3][4][2];
  typedef ::TAO::WString_Manager MultiArrayWString_slice[4][2];
  struct MultiArrayWString_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        MultiArrayWString,
        MultiArrayWString_slice,
        MultiArrayWString_tag
      >
    MultiArrayWString_var;

  typedef
    TAO_Array_Out_T<
        MultiArrayWString,
        MultiArrayWString_var,
        MultiArrayWString_slice,
        MultiArrayWString_tag
      >
    MultiArrayWString_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayWString,
        MultiArrayWString_slice,
        MultiArrayWString_tag
      >
    MultiArrayWString_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayWString_slice *
  MultiArrayWString_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayWString_free (
      MultiArrayWString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayWString_slice *
  MultiArrayWString_dup (
      const MultiArrayWString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayWString_copy (
      MultiArrayWString_slice *_tao_to,
      const MultiArrayWString_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef NestedTestStruct MultiArrayStruct[3][4][2];
  typedef NestedTestStruct MultiArrayStruct_slice[4][2];
  struct MultiArrayStruct_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        MultiArrayStruct,
        MultiArrayStruct_slice,
        MultiArrayStruct_tag
      >
    MultiArrayStruct_var;

  typedef
    TAO_Array_Out_T<
        MultiArrayStruct,
        MultiArrayStruct_var,
        MultiArrayStruct_slice,
        MultiArrayStruct_tag
      >
    MultiArrayStruct_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayStruct,
        MultiArrayStruct_slice,
        MultiArrayStruct_tag
      >
    MultiArrayStruct_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayStruct_slice *
  MultiArrayStruct_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayStruct_free (
      MultiArrayStruct_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayStruct_slice *
  MultiArrayStruct_dup (
      const MultiArrayStruct_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayStruct_copy (
      MultiArrayStruct_slice *_tao_to,
      const MultiArrayStruct_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Float ArrayFloat[5];
  typedef ::CORBA::Float ArrayFloat_slice;
  struct ArrayFloat_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayFloat,
        ArrayFloat_slice,
        ArrayFloat_tag
      >
    ArrayFloat_var;

  typedef
    ArrayFloat
    ArrayFloat_out;

  typedef
    TAO_Array_Forany_T<
        ArrayFloat,
        ArrayFloat_slice,
        ArrayFloat_tag
      >
    ArrayFloat_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayFloat_slice *
  ArrayFloat_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayFloat_free (
      ArrayFloat_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayFloat_slice *
  ArrayFloat_dup (
      const ArrayFloat_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayFloat_copy (
      ArrayFloat_slice *_tao_to,
      const ArrayFloat_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Double ArrayDouble[5];
  typedef ::CORBA::Double ArrayDouble_slice;
  struct ArrayDouble_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayDouble,
        ArrayDouble_slice,
        ArrayDouble_tag
      >
    ArrayDouble_var;

  typedef
    ArrayDouble
    ArrayDouble_out;

  typedef
    TAO_Array_Forany_T<
        ArrayDouble,
        ArrayDouble_slice,
        ArrayDouble_tag
      >
    ArrayDouble_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayDouble_slice *
  ArrayDouble_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayDouble_free (
      ArrayDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayDouble_slice *
  ArrayDouble_dup (
      const ArrayDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayDouble_copy (
      ArrayDouble_slice *_tao_to,
      const ArrayDouble_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::LongDouble ArrayLongDouble[5];
  typedef ::CORBA::LongDouble ArrayLongDouble_slice;
  struct ArrayLongDouble_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayLongDouble,
        ArrayLongDouble_slice,
        ArrayLongDouble_tag
      >
    ArrayLongDouble_var;

  typedef
    ArrayLongDouble
    ArrayLongDouble_out;

  typedef
    TAO_Array_Forany_T<
        ArrayLongDouble,
        ArrayLongDouble_slice,
        ArrayLongDouble_tag
      >
    ArrayLongDouble_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayLongDouble_slice *
  ArrayLongDouble_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayLongDouble_free (
      ArrayLongDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayLongDouble_slice *
  ArrayLongDouble_dup (
      const ArrayLongDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayLongDouble_copy (
      ArrayLongDouble_slice *_tao_to,
      const ArrayLongDouble_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_FLOATLIST_CH_)
#define _TEST_FLOATLIST_CH_

  class FloatList;

  typedef
    ::TAO_FixedSeq_Var_T<
        FloatList
      >
    FloatList_var;

  typedef
    ::TAO_Seq_Out_T<
        FloatList
      >
    FloatList_out;

  class TestPInvokeIdlIDL_Export FloatList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Float
          >
  {
  public:
    FloatList (void);
    FloatList ( ::CORBA::ULong max);
    FloatList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Float* buffer,
      ::CORBA::Boolean release = false);
    FloatList (const FloatList &);
    virtual ~FloatList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef FloatList_var _var_type;
    typedef FloatList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_DOUBLELIST_CH_)
#define _TEST_DOUBLELIST_CH_

  class DoubleList;

  typedef
    ::TAO_FixedSeq_Var_T<
        DoubleList
      >
    DoubleList_var;

  typedef
    ::TAO_Seq_Out_T<
        DoubleList
      >
    DoubleList_out;

  class TestPInvokeIdlIDL_Export DoubleList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Double
          >
  {
  public:
    DoubleList (void);
    DoubleList ( ::CORBA::ULong max);
    DoubleList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    DoubleList (const DoubleList &);
    virtual ~DoubleList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef DoubleList_var _var_type;
    typedef DoubleList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_LONGDOUBLELIST_CH_)
#define _TEST_LONGDOUBLELIST_CH_

  class LongDoubleList;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongDoubleList
      >
    LongDoubleList_var;

  typedef
    ::TAO_Seq_Out_T<
        LongDoubleList
      >
    LongDoubleList_out;

  class TestPInvokeIdlIDL_Export LongDoubleList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::LongDouble
          >
  {
  public:
    LongDoubleList (void);
    LongDoubleList ( ::CORBA::ULong max);
    LongDoubleList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::LongDouble* buffer,
      ::CORBA::Boolean release = false);
    LongDoubleList (const LongDoubleList &);
    virtual ~LongDoubleList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef LongDoubleList_var _var_type;
    typedef LongDoubleList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Float MultiArrayFloat[3][4][2];
  typedef ::CORBA::Float MultiArrayFloat_slice[4][2];
  struct MultiArrayFloat_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayFloat,
        MultiArrayFloat_slice,
        MultiArrayFloat_tag
      >
    MultiArrayFloat_var;

  typedef
    MultiArrayFloat
    MultiArrayFloat_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayFloat,
        MultiArrayFloat_slice,
        MultiArrayFloat_tag
      >
    MultiArrayFloat_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayFloat_slice *
  MultiArrayFloat_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayFloat_free (
      MultiArrayFloat_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayFloat_slice *
  MultiArrayFloat_dup (
      const MultiArrayFloat_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayFloat_copy (
      MultiArrayFloat_slice *_tao_to,
      const MultiArrayFloat_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Double MultiArrayDouble[3][4][2];
  typedef ::CORBA::Double MultiArrayDouble_slice[4][2];
  struct MultiArrayDouble_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayDouble,
        MultiArrayDouble_slice,
        MultiArrayDouble_tag
      >
    MultiArrayDouble_var;

  typedef
    MultiArrayDouble
    MultiArrayDouble_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayDouble,
        MultiArrayDouble_slice,
        MultiArrayDouble_tag
      >
    MultiArrayDouble_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayDouble_slice *
  MultiArrayDouble_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayDouble_free (
      MultiArrayDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayDouble_slice *
  MultiArrayDouble_dup (
      const MultiArrayDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayDouble_copy (
      MultiArrayDouble_slice *_tao_to,
      const MultiArrayDouble_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::LongDouble MultiArrayLongDouble[3][4][2];
  typedef ::CORBA::LongDouble MultiArrayLongDouble_slice[4][2];
  struct MultiArrayLongDouble_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayLongDouble,
        MultiArrayLongDouble_slice,
        MultiArrayLongDouble_tag
      >
    MultiArrayLongDouble_var;

  typedef
    MultiArrayLongDouble
    MultiArrayLongDouble_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayLongDouble,
        MultiArrayLongDouble_slice,
        MultiArrayLongDouble_tag
      >
    MultiArrayLongDouble_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayLongDouble_slice *
  MultiArrayLongDouble_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayLongDouble_free (
      MultiArrayLongDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayLongDouble_slice *
  MultiArrayLongDouble_dup (
      const MultiArrayLongDouble_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayLongDouble_copy (
      MultiArrayLongDouble_slice *_tao_to,
      const MultiArrayLongDouble_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Char ArrayChar[5];
  typedef ::CORBA::Char ArrayChar_slice;
  struct ArrayChar_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayChar,
        ArrayChar_slice,
        ArrayChar_tag
      >
    ArrayChar_var;

  typedef
    ArrayChar
    ArrayChar_out;

  typedef
    TAO_Array_Forany_T<
        ArrayChar,
        ArrayChar_slice,
        ArrayChar_tag
      >
    ArrayChar_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayChar_slice *
  ArrayChar_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayChar_free (
      ArrayChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayChar_slice *
  ArrayChar_dup (
      const ArrayChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayChar_copy (
      ArrayChar_slice *_tao_to,
      const ArrayChar_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::WChar ArrayWChar[5];
  typedef ::CORBA::WChar ArrayWChar_slice;
  struct ArrayWChar_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayWChar,
        ArrayWChar_slice,
        ArrayWChar_tag
      >
    ArrayWChar_var;

  typedef
    ArrayWChar
    ArrayWChar_out;

  typedef
    TAO_Array_Forany_T<
        ArrayWChar,
        ArrayWChar_slice,
        ArrayWChar_tag
      >
    ArrayWChar_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayWChar_slice *
  ArrayWChar_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayWChar_free (
      ArrayWChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayWChar_slice *
  ArrayWChar_dup (
      const ArrayWChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayWChar_copy (
      ArrayWChar_slice *_tao_to,
      const ArrayWChar_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_CHARLIST_CH_)
#define _TEST_CHARLIST_CH_

  class CharList;

  typedef
    ::TAO_FixedSeq_Var_T<
        CharList
      >
    CharList_var;

  typedef
    ::TAO_Seq_Out_T<
        CharList
      >
    CharList_out;

  class TestPInvokeIdlIDL_Export CharList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Char
          >
  {
  public:
    CharList (void);
    CharList ( ::CORBA::ULong max);
    CharList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char* buffer,
      ::CORBA::Boolean release = false);
    CharList (const CharList &);
    virtual ~CharList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef CharList_var _var_type;
    typedef CharList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_WCHARLIST_CH_)
#define _TEST_WCHARLIST_CH_

  class WCharList;

  typedef
    ::TAO_FixedSeq_Var_T<
        WCharList
      >
    WCharList_var;

  typedef
    ::TAO_Seq_Out_T<
        WCharList
      >
    WCharList_out;

  class TestPInvokeIdlIDL_Export WCharList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::WChar
          >
  {
  public:
    WCharList (void);
    WCharList ( ::CORBA::ULong max);
    WCharList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::WChar* buffer,
      ::CORBA::Boolean release = false);
    WCharList (const WCharList &);
    virtual ~WCharList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef WCharList_var _var_type;
    typedef WCharList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Char MultiArrayChar[3][4][2];
  typedef ::CORBA::Char MultiArrayChar_slice[4][2];
  struct MultiArrayChar_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayChar,
        MultiArrayChar_slice,
        MultiArrayChar_tag
      >
    MultiArrayChar_var;

  typedef
    MultiArrayChar
    MultiArrayChar_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayChar,
        MultiArrayChar_slice,
        MultiArrayChar_tag
      >
    MultiArrayChar_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayChar_slice *
  MultiArrayChar_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayChar_free (
      MultiArrayChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayChar_slice *
  MultiArrayChar_dup (
      const MultiArrayChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayChar_copy (
      MultiArrayChar_slice *_tao_to,
      const MultiArrayChar_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::WChar MultiArrayWChar[3][4][2];
  typedef ::CORBA::WChar MultiArrayWChar_slice[4][2];
  struct MultiArrayWChar_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayWChar,
        MultiArrayWChar_slice,
        MultiArrayWChar_tag
      >
    MultiArrayWChar_var;

  typedef
    MultiArrayWChar
    MultiArrayWChar_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayWChar,
        MultiArrayWChar_slice,
        MultiArrayWChar_tag
      >
    MultiArrayWChar_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayWChar_slice *
  MultiArrayWChar_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayWChar_free (
      MultiArrayWChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayWChar_slice *
  MultiArrayWChar_dup (
      const MultiArrayWChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayWChar_copy (
      MultiArrayWChar_slice *_tao_to,
      const MultiArrayWChar_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Short ArrayShort[5];
  typedef ::CORBA::Short ArrayShort_slice;
  struct ArrayShort_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayShort,
        ArrayShort_slice,
        ArrayShort_tag
      >
    ArrayShort_var;

  typedef
    ArrayShort
    ArrayShort_out;

  typedef
    TAO_Array_Forany_T<
        ArrayShort,
        ArrayShort_slice,
        ArrayShort_tag
      >
    ArrayShort_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayShort_slice *
  ArrayShort_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayShort_free (
      ArrayShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayShort_slice *
  ArrayShort_dup (
      const ArrayShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayShort_copy (
      ArrayShort_slice *_tao_to,
      const ArrayShort_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::LongLong ArrayLongLong[5];
  typedef ::CORBA::LongLong ArrayLongLong_slice;
  struct ArrayLongLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayLongLong,
        ArrayLongLong_slice,
        ArrayLongLong_tag
      >
    ArrayLongLong_var;

  typedef
    ArrayLongLong
    ArrayLongLong_out;

  typedef
    TAO_Array_Forany_T<
        ArrayLongLong,
        ArrayLongLong_slice,
        ArrayLongLong_tag
      >
    ArrayLongLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayLongLong_slice *
  ArrayLongLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayLongLong_free (
      ArrayLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayLongLong_slice *
  ArrayLongLong_dup (
      const ArrayLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayLongLong_copy (
      ArrayLongLong_slice *_tao_to,
      const ArrayLongLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::UShort ArrayUnsignedShort[5];
  typedef ::CORBA::UShort ArrayUnsignedShort_slice;
  struct ArrayUnsignedShort_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayUnsignedShort,
        ArrayUnsignedShort_slice,
        ArrayUnsignedShort_tag
      >
    ArrayUnsignedShort_var;

  typedef
    ArrayUnsignedShort
    ArrayUnsignedShort_out;

  typedef
    TAO_Array_Forany_T<
        ArrayUnsignedShort,
        ArrayUnsignedShort_slice,
        ArrayUnsignedShort_tag
      >
    ArrayUnsignedShort_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayUnsignedShort_slice *
  ArrayUnsignedShort_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayUnsignedShort_free (
      ArrayUnsignedShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayUnsignedShort_slice *
  ArrayUnsignedShort_dup (
      const ArrayUnsignedShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayUnsignedShort_copy (
      ArrayUnsignedShort_slice *_tao_to,
      const ArrayUnsignedShort_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::ULong ArrayUnsignedLong[5];
  typedef ::CORBA::ULong ArrayUnsignedLong_slice;
  struct ArrayUnsignedLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayUnsignedLong,
        ArrayUnsignedLong_slice,
        ArrayUnsignedLong_tag
      >
    ArrayUnsignedLong_var;

  typedef
    ArrayUnsignedLong
    ArrayUnsignedLong_out;

  typedef
    TAO_Array_Forany_T<
        ArrayUnsignedLong,
        ArrayUnsignedLong_slice,
        ArrayUnsignedLong_tag
      >
    ArrayUnsignedLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayUnsignedLong_slice *
  ArrayUnsignedLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayUnsignedLong_free (
      ArrayUnsignedLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayUnsignedLong_slice *
  ArrayUnsignedLong_dup (
      const ArrayUnsignedLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayUnsignedLong_copy (
      ArrayUnsignedLong_slice *_tao_to,
      const ArrayUnsignedLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::ULongLong ArrayUnsignedLongLong[5];
  typedef ::CORBA::ULongLong ArrayUnsignedLongLong_slice;
  struct ArrayUnsignedLongLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayUnsignedLongLong,
        ArrayUnsignedLongLong_slice,
        ArrayUnsignedLongLong_tag
      >
    ArrayUnsignedLongLong_var;

  typedef
    ArrayUnsignedLongLong
    ArrayUnsignedLongLong_out;

  typedef
    TAO_Array_Forany_T<
        ArrayUnsignedLongLong,
        ArrayUnsignedLongLong_slice,
        ArrayUnsignedLongLong_tag
      >
    ArrayUnsignedLongLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayUnsignedLongLong_slice *
  ArrayUnsignedLongLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayUnsignedLongLong_free (
      ArrayUnsignedLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayUnsignedLongLong_slice *
  ArrayUnsignedLongLong_dup (
      const ArrayUnsignedLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayUnsignedLongLong_copy (
      ArrayUnsignedLongLong_slice *_tao_to,
      const ArrayUnsignedLongLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_SHORTLIST_CH_)
#define _TEST_SHORTLIST_CH_

  class ShortList;

  typedef
    ::TAO_FixedSeq_Var_T<
        ShortList
      >
    ShortList_var;

  typedef
    ::TAO_Seq_Out_T<
        ShortList
      >
    ShortList_out;

  class TestPInvokeIdlIDL_Export ShortList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Short
          >
  {
  public:
    ShortList (void);
    ShortList ( ::CORBA::ULong max);
    ShortList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
    ShortList (const ShortList &);
    virtual ~ShortList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef ShortList_var _var_type;
    typedef ShortList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_LONGLONGLIST_CH_)
#define _TEST_LONGLONGLIST_CH_

  class LongLongList;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongLongList
      >
    LongLongList_var;

  typedef
    ::TAO_Seq_Out_T<
        LongLongList
      >
    LongLongList_out;

  class TestPInvokeIdlIDL_Export LongLongList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::LongLong
          >
  {
  public:
    LongLongList (void);
    LongLongList ( ::CORBA::ULong max);
    LongLongList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::LongLong* buffer,
      ::CORBA::Boolean release = false);
    LongLongList (const LongLongList &);
    virtual ~LongLongList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef LongLongList_var _var_type;
    typedef LongLongList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_UNSIGNEDSHORTLIST_CH_)
#define _TEST_UNSIGNEDSHORTLIST_CH_

  class UnsignedShortList;

  typedef
    ::TAO_FixedSeq_Var_T<
        UnsignedShortList
      >
    UnsignedShortList_var;

  typedef
    ::TAO_Seq_Out_T<
        UnsignedShortList
      >
    UnsignedShortList_out;

  class TestPInvokeIdlIDL_Export UnsignedShortList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::UShort
          >
  {
  public:
    UnsignedShortList (void);
    UnsignedShortList ( ::CORBA::ULong max);
    UnsignedShortList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer,
      ::CORBA::Boolean release = false);
    UnsignedShortList (const UnsignedShortList &);
    virtual ~UnsignedShortList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef UnsignedShortList_var _var_type;
    typedef UnsignedShortList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_UNSIGNEDLONGLIST_CH_)
#define _TEST_UNSIGNEDLONGLIST_CH_

  class UnsignedLongList;

  typedef
    ::TAO_FixedSeq_Var_T<
        UnsignedLongList
      >
    UnsignedLongList_var;

  typedef
    ::TAO_Seq_Out_T<
        UnsignedLongList
      >
    UnsignedLongList_out;

  class TestPInvokeIdlIDL_Export UnsignedLongList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::ULong
          >
  {
  public:
    UnsignedLongList (void);
    UnsignedLongList ( ::CORBA::ULong max);
    UnsignedLongList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULong* buffer,
      ::CORBA::Boolean release = false);
    UnsignedLongList (const UnsignedLongList &);
    virtual ~UnsignedLongList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef UnsignedLongList_var _var_type;
    typedef UnsignedLongList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_UNSIGNEDLONGLONGLIST_CH_)
#define _TEST_UNSIGNEDLONGLONGLIST_CH_

  class UnsignedLongLongList;

  typedef
    ::TAO_FixedSeq_Var_T<
        UnsignedLongLongList
      >
    UnsignedLongLongList_var;

  typedef
    ::TAO_Seq_Out_T<
        UnsignedLongLongList
      >
    UnsignedLongLongList_out;

  class TestPInvokeIdlIDL_Export UnsignedLongLongList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::ULongLong
          >
  {
  public:
    UnsignedLongLongList (void);
    UnsignedLongLongList ( ::CORBA::ULong max);
    UnsignedLongLongList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULongLong* buffer,
      ::CORBA::Boolean release = false);
    UnsignedLongLongList (const UnsignedLongLongList &);
    virtual ~UnsignedLongLongList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef UnsignedLongLongList_var _var_type;
    typedef UnsignedLongLongList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Short MultiArrayShort[3][4][2];
  typedef ::CORBA::Short MultiArrayShort_slice[4][2];
  struct MultiArrayShort_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayShort,
        MultiArrayShort_slice,
        MultiArrayShort_tag
      >
    MultiArrayShort_var;

  typedef
    MultiArrayShort
    MultiArrayShort_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayShort,
        MultiArrayShort_slice,
        MultiArrayShort_tag
      >
    MultiArrayShort_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayShort_slice *
  MultiArrayShort_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayShort_free (
      MultiArrayShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayShort_slice *
  MultiArrayShort_dup (
      const MultiArrayShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayShort_copy (
      MultiArrayShort_slice *_tao_to,
      const MultiArrayShort_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::LongLong MultiArrayLongLong[3][4][2];
  typedef ::CORBA::LongLong MultiArrayLongLong_slice[4][2];
  struct MultiArrayLongLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayLongLong,
        MultiArrayLongLong_slice,
        MultiArrayLongLong_tag
      >
    MultiArrayLongLong_var;

  typedef
    MultiArrayLongLong
    MultiArrayLongLong_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayLongLong,
        MultiArrayLongLong_slice,
        MultiArrayLongLong_tag
      >
    MultiArrayLongLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayLongLong_slice *
  MultiArrayLongLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayLongLong_free (
      MultiArrayLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayLongLong_slice *
  MultiArrayLongLong_dup (
      const MultiArrayLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayLongLong_copy (
      MultiArrayLongLong_slice *_tao_to,
      const MultiArrayLongLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::UShort MultiArrayUnsignedShort[3][4][2];
  typedef ::CORBA::UShort MultiArrayUnsignedShort_slice[4][2];
  struct MultiArrayUnsignedShort_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayUnsignedShort,
        MultiArrayUnsignedShort_slice,
        MultiArrayUnsignedShort_tag
      >
    MultiArrayUnsignedShort_var;

  typedef
    MultiArrayUnsignedShort
    MultiArrayUnsignedShort_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayUnsignedShort,
        MultiArrayUnsignedShort_slice,
        MultiArrayUnsignedShort_tag
      >
    MultiArrayUnsignedShort_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayUnsignedShort_slice *
  MultiArrayUnsignedShort_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayUnsignedShort_free (
      MultiArrayUnsignedShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayUnsignedShort_slice *
  MultiArrayUnsignedShort_dup (
      const MultiArrayUnsignedShort_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayUnsignedShort_copy (
      MultiArrayUnsignedShort_slice *_tao_to,
      const MultiArrayUnsignedShort_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::ULong MultiArrayUnsignedLong[3][4][2];
  typedef ::CORBA::ULong MultiArrayUnsignedLong_slice[4][2];
  struct MultiArrayUnsignedLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayUnsignedLong,
        MultiArrayUnsignedLong_slice,
        MultiArrayUnsignedLong_tag
      >
    MultiArrayUnsignedLong_var;

  typedef
    MultiArrayUnsignedLong
    MultiArrayUnsignedLong_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayUnsignedLong,
        MultiArrayUnsignedLong_slice,
        MultiArrayUnsignedLong_tag
      >
    MultiArrayUnsignedLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayUnsignedLong_slice *
  MultiArrayUnsignedLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayUnsignedLong_free (
      MultiArrayUnsignedLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayUnsignedLong_slice *
  MultiArrayUnsignedLong_dup (
      const MultiArrayUnsignedLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayUnsignedLong_copy (
      MultiArrayUnsignedLong_slice *_tao_to,
      const MultiArrayUnsignedLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::ULongLong MultiArrayUnsignedLongLong[3][4][2];
  typedef ::CORBA::ULongLong MultiArrayUnsignedLongLong_slice[4][2];
  struct MultiArrayUnsignedLongLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayUnsignedLongLong,
        MultiArrayUnsignedLongLong_slice,
        MultiArrayUnsignedLongLong_tag
      >
    MultiArrayUnsignedLongLong_var;

  typedef
    MultiArrayUnsignedLongLong
    MultiArrayUnsignedLongLong_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayUnsignedLongLong,
        MultiArrayUnsignedLongLong_slice,
        MultiArrayUnsignedLongLong_tag
      >
    MultiArrayUnsignedLongLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayUnsignedLongLong_slice *
  MultiArrayUnsignedLongLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayUnsignedLongLong_free (
      MultiArrayUnsignedLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayUnsignedLongLong_slice *
  MultiArrayUnsignedLongLong_dup (
      const MultiArrayUnsignedLongLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayUnsignedLongLong_copy (
      MultiArrayUnsignedLongLong_slice *_tao_to,
      const MultiArrayUnsignedLongLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Boolean ArrayBoolean[5];
  typedef ::CORBA::Boolean ArrayBoolean_slice;
  struct ArrayBoolean_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayBoolean,
        ArrayBoolean_slice,
        ArrayBoolean_tag
      >
    ArrayBoolean_var;

  typedef
    ArrayBoolean
    ArrayBoolean_out;

  typedef
    TAO_Array_Forany_T<
        ArrayBoolean,
        ArrayBoolean_slice,
        ArrayBoolean_tag
      >
    ArrayBoolean_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayBoolean_slice *
  ArrayBoolean_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayBoolean_free (
      ArrayBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayBoolean_slice *
  ArrayBoolean_dup (
      const ArrayBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayBoolean_copy (
      ArrayBoolean_slice *_tao_to,
      const ArrayBoolean_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Octet ArrayOctet[5];
  typedef ::CORBA::Octet ArrayOctet_slice;
  struct ArrayOctet_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayOctet,
        ArrayOctet_slice,
        ArrayOctet_tag
      >
    ArrayOctet_var;

  typedef
    ArrayOctet
    ArrayOctet_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOctet,
        ArrayOctet_slice,
        ArrayOctet_tag
      >
    ArrayOctet_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOctet_slice *
  ArrayOctet_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOctet_free (
      ArrayOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOctet_slice *
  ArrayOctet_dup (
      const ArrayOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOctet_copy (
      ArrayOctet_slice *_tao_to,
      const ArrayOctet_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_BOOLEANLIST_CH_)
#define _TEST_BOOLEANLIST_CH_

  class BooleanList;

  typedef
    ::TAO_FixedSeq_Var_T<
        BooleanList
      >
    BooleanList_var;

  typedef
    ::TAO_Seq_Out_T<
        BooleanList
      >
    BooleanList_out;

  class TestPInvokeIdlIDL_Export BooleanList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Boolean
          >
  {
  public:
    BooleanList (void);
    BooleanList ( ::CORBA::ULong max);
    BooleanList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer,
      ::CORBA::Boolean release = false);
    BooleanList (const BooleanList &);
    virtual ~BooleanList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef BooleanList_var _var_type;
    typedef BooleanList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_OCTETLIST_CH_)
#define _TEST_OCTETLIST_CH_

  class OctetList;

  typedef
    ::TAO_FixedSeq_Var_T<
        OctetList
      >
    OctetList_var;

  typedef
    ::TAO_Seq_Out_T<
        OctetList
      >
    OctetList_out;

  class TestPInvokeIdlIDL_Export OctetList
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Octet
          >
  {
  public:
    OctetList (void);
    OctetList ( ::CORBA::ULong max);
    OctetList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer,
      ::CORBA::Boolean release = false);
    OctetList (const OctetList &);
    virtual ~OctetList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef OctetList_var _var_type;
    typedef OctetList_out _out_type;

    

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    OctetList (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Boolean MultiArrayBoolean[3][4][2];
  typedef ::CORBA::Boolean MultiArrayBoolean_slice[4][2];
  struct MultiArrayBoolean_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayBoolean,
        MultiArrayBoolean_slice,
        MultiArrayBoolean_tag
      >
    MultiArrayBoolean_var;

  typedef
    MultiArrayBoolean
    MultiArrayBoolean_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayBoolean,
        MultiArrayBoolean_slice,
        MultiArrayBoolean_tag
      >
    MultiArrayBoolean_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayBoolean_slice *
  MultiArrayBoolean_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayBoolean_free (
      MultiArrayBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayBoolean_slice *
  MultiArrayBoolean_dup (
      const MultiArrayBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayBoolean_copy (
      MultiArrayBoolean_slice *_tao_to,
      const MultiArrayBoolean_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef ::CORBA::Octet MultiArrayOctet[3][4][2];
  typedef ::CORBA::Octet MultiArrayOctet_slice[4][2];
  struct MultiArrayOctet_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayOctet,
        MultiArrayOctet_slice,
        MultiArrayOctet_tag
      >
    MultiArrayOctet_var;

  typedef
    MultiArrayOctet
    MultiArrayOctet_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayOctet,
        MultiArrayOctet_slice,
        MultiArrayOctet_tag
      >
    MultiArrayOctet_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayOctet_slice *
  MultiArrayOctet_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayOctet_free (
      MultiArrayOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayOctet_slice *
  MultiArrayOctet_dup (
      const MultiArrayOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayOctet_copy (
      MultiArrayOctet_slice *_tao_to,
      const MultiArrayOctet_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef PrimitiveEnum ArrayEnum[5];
  typedef PrimitiveEnum ArrayEnum_slice;
  struct ArrayEnum_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayEnum,
        ArrayEnum_slice,
        ArrayEnum_tag
      >
    ArrayEnum_var;

  typedef
    ArrayEnum
    ArrayEnum_out;

  typedef
    TAO_Array_Forany_T<
        ArrayEnum,
        ArrayEnum_slice,
        ArrayEnum_tag
      >
    ArrayEnum_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayEnum_slice *
  ArrayEnum_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayEnum_free (
      ArrayEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayEnum_slice *
  ArrayEnum_dup (
      const ArrayEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayEnum_copy (
      ArrayEnum_slice *_tao_to,
      const ArrayEnum_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_ENUMLIST_CH_)
#define _TEST_ENUMLIST_CH_

  class EnumList;

  typedef
    ::TAO_FixedSeq_Var_T<
        EnumList
      >
    EnumList_var;

  typedef
    ::TAO_Seq_Out_T<
        EnumList
      >
    EnumList_out;

  class TestPInvokeIdlIDL_Export EnumList
    : public
        ::TAO::unbounded_value_sequence<
            PrimitiveEnum
          >
  {
  public:
    EnumList (void);
    EnumList ( ::CORBA::ULong max);
    EnumList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PrimitiveEnum* buffer,
      ::CORBA::Boolean release = false);
    EnumList (const EnumList &);
    virtual ~EnumList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef EnumList_var _var_type;
    typedef EnumList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ch.cpp:54

  typedef PrimitiveEnum MultiArrayEnum[3][4][2];
  typedef PrimitiveEnum MultiArrayEnum_slice[4][2];
  struct MultiArrayEnum_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MultiArrayEnum,
        MultiArrayEnum_slice,
        MultiArrayEnum_tag
      >
    MultiArrayEnum_var;

  typedef
    MultiArrayEnum
    MultiArrayEnum_out;

  typedef
    TAO_Array_Forany_T<
        MultiArrayEnum,
        MultiArrayEnum_slice,
        MultiArrayEnum_tag
      >
    MultiArrayEnum_forany;

  TAO_NAMESPACE_STORAGE_CLASS MultiArrayEnum_slice *
  MultiArrayEnum_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayEnum_free (
      MultiArrayEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MultiArrayEnum_slice *
  MultiArrayEnum_dup (
      const MultiArrayEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MultiArrayEnum_copy (
      MultiArrayEnum_slice *_tao_to,
      const MultiArrayEnum_slice *_tao_from);

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_LONGBOUNDEDLIST_CH_)
#define _TEST_LONGBOUNDEDLIST_CH_

  class LongBoundedList;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongBoundedList
      >
    LongBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        LongBoundedList
      >
    LongBoundedList_out;

  class TestPInvokeIdlIDL_Export LongBoundedList
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::Long,
            5
          >
  {
  public:
    LongBoundedList (void);
    LongBoundedList (
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
    LongBoundedList (const LongBoundedList &);
    virtual ~LongBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef LongBoundedList_var _var_type;
    typedef LongBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_STRINGBOUNDEDLIST_CH_)
#define _TEST_STRINGBOUNDEDLIST_CH_

  class StringBoundedList;

  typedef
    ::TAO_VarSeq_Var_T<
        StringBoundedList
      >
    StringBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        StringBoundedList
      >
    StringBoundedList_out;

  class TestPInvokeIdlIDL_Export StringBoundedList
    : public
        ::TAO::bounded_basic_string_sequence<char, 5>
  {
  public:
    StringBoundedList (void);
    StringBoundedList (
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    StringBoundedList (const StringBoundedList &);
    virtual ~StringBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef StringBoundedList_var _var_type;
    typedef StringBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_WSTRINGBOUNDEDLIST_CH_)
#define _TEST_WSTRINGBOUNDEDLIST_CH_

  class WStringBoundedList;

  typedef
    ::TAO_VarSeq_Var_T<
        WStringBoundedList
      >
    WStringBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        WStringBoundedList
      >
    WStringBoundedList_out;

  class TestPInvokeIdlIDL_Export WStringBoundedList
    : public
        ::TAO::bounded_basic_string_sequence<CORBA::WChar, 5>
  {
  public:
    WStringBoundedList (void);
    WStringBoundedList (
      ::CORBA::ULong length,
      ::CORBA::WChar ** buffer,
      ::CORBA::Boolean release = false);
    WStringBoundedList (const WStringBoundedList &);
    virtual ~WStringBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef WStringBoundedList_var _var_type;
    typedef WStringBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_STRUCTBOUNDEDLIST_CH_)
#define _TEST_STRUCTBOUNDEDLIST_CH_

  class StructBoundedList;

  typedef
    ::TAO_VarSeq_Var_T<
        StructBoundedList
      >
    StructBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        StructBoundedList
      >
    StructBoundedList_out;

  class TestPInvokeIdlIDL_Export StructBoundedList
    : public
        ::TAO::bounded_value_sequence<
            NestedTestStruct,
            5
          >
  {
  public:
    StructBoundedList (void);
    StructBoundedList (
      ::CORBA::ULong length,
      NestedTestStruct* buffer,
      ::CORBA::Boolean release = false);
    StructBoundedList (const StructBoundedList &);
    virtual ~StructBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef StructBoundedList_var _var_type;
    typedef StructBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_LONGDOUBLEBOUNDEDLIST_CH_)
#define _TEST_LONGDOUBLEBOUNDEDLIST_CH_

  class LongDoubleBoundedList;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongDoubleBoundedList
      >
    LongDoubleBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        LongDoubleBoundedList
      >
    LongDoubleBoundedList_out;

  class TestPInvokeIdlIDL_Export LongDoubleBoundedList
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::LongDouble,
            5
          >
  {
  public:
    LongDoubleBoundedList (void);
    LongDoubleBoundedList (
      ::CORBA::ULong length,
      ::CORBA::LongDouble* buffer,
      ::CORBA::Boolean release = false);
    LongDoubleBoundedList (const LongDoubleBoundedList &);
    virtual ~LongDoubleBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef LongDoubleBoundedList_var _var_type;
    typedef LongDoubleBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_BOOLEANBOUNDEDLIST_CH_)
#define _TEST_BOOLEANBOUNDEDLIST_CH_

  class BooleanBoundedList;

  typedef
    ::TAO_FixedSeq_Var_T<
        BooleanBoundedList
      >
    BooleanBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        BooleanBoundedList
      >
    BooleanBoundedList_out;

  class TestPInvokeIdlIDL_Export BooleanBoundedList
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::Boolean,
            5
          >
  {
  public:
    BooleanBoundedList (void);
    BooleanBoundedList (
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer,
      ::CORBA::Boolean release = false);
    BooleanBoundedList (const BooleanBoundedList &);
    virtual ~BooleanBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef BooleanBoundedList_var _var_type;
    typedef BooleanBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_TEST_ENUMBOUNDEDLIST_CH_)
#define _TEST_ENUMBOUNDEDLIST_CH_

  class EnumBoundedList;

  typedef
    ::TAO_FixedSeq_Var_T<
        EnumBoundedList
      >
    EnumBoundedList_var;

  typedef
    ::TAO_Seq_Out_T<
        EnumBoundedList
      >
    EnumBoundedList_out;

  class TestPInvokeIdlIDL_Export EnumBoundedList
    : public
        ::TAO::bounded_value_sequence<
            PrimitiveEnum,
            5
          >
  {
  public:
    EnumBoundedList (void);
    EnumBoundedList (
      ::CORBA::ULong length,
      PrimitiveEnum* buffer,
      ::CORBA::Boolean release = false);
    EnumBoundedList (const EnumBoundedList &);
    virtual ~EnumBoundedList (void);
    

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef EnumBoundedList_var _var_type;
    typedef EnumBoundedList_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:261

  struct BasicTestStruct;

  typedef
    ::TAO_Var_Var_T<
        BasicTestStruct
      >
    BasicTestStruct_var;

  typedef
    ::TAO_Out_T<
        BasicTestStruct
      >
    BasicTestStruct_out;

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:51

  struct TestPInvokeIdlIDL_Export BasicTestStruct
  {

    // TAO_IDL - Generated from
    // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    
    typedef BasicTestStruct_var _var_type;
    typedef BasicTestStruct_out _out_type;
    
    ::CORBA::Long Id;
    ::TAO::String_Manager Message;
    ::TAO::WString_Manager WMessage;
    Test::LongList LongSequence;
    Test::StringList StringSequence;
    Test::WStringList WStringSequence;
    Test::ArrayLong LongArray;
    Test::ArrayString StringArray;
    Test::ArrayWString WStringArray;
    Test::NestedTestStruct StructTest;
    Test::StructList StructSequence;
    Test::ArrayStruct StructArray;
    Test::MultiArrayLong LongMultiArray;
    Test::MultiArrayString StringMultiArray;
    Test::MultiArrayWString WStringMultiArray;
    Test::MultiArrayStruct StructMultiArray;
    ::CORBA::Float FloatType;
    ::CORBA::Double DoubleType;
    ::CORBA::LongDouble LongDoubleType;
    Test::ArrayFloat FloatArray;
    Test::ArrayDouble DoubleArray;
    Test::ArrayLongDouble LongDoubleArray;
    Test::FloatList FloatSequence;
    Test::DoubleList DoubleSequence;
    Test::LongDoubleList LongDoubleSequence;
    Test::MultiArrayFloat FloatMultiArray;
    Test::MultiArrayDouble DoubleMultiArray;
    Test::MultiArrayLongDouble LongDoubleMultiArray;
    ::CORBA::Char CharType;
    ::CORBA::WChar WCharType;
    Test::ArrayChar CharArray;
    Test::ArrayWChar WCharArray;
    Test::CharList CharSequence;
    Test::WCharList WCharSequence;
    Test::MultiArrayChar CharMultiArray;
    Test::MultiArrayWChar WCharMultiArray;
    ::CORBA::Short ShortType;
    ::CORBA::LongLong LongLongType;
    ::CORBA::UShort UnsignedShortType;
    ::CORBA::ULong UnsignedLongType;
    ::CORBA::ULongLong UnsignedLongLongType;
    Test::ArrayShort ShortArray;
    Test::ArrayLongLong LongLongArray;
    Test::ArrayUnsignedShort UnsignedShortArray;
    Test::ArrayUnsignedLong UnsignedLongArray;
    Test::ArrayUnsignedLongLong UnsignedLongLongArray;
    Test::ShortList ShortSequence;
    Test::LongLongList LongLongSequence;
    Test::UnsignedShortList UnsignedShortSequence;
    Test::UnsignedLongList UnsignedLongSequence;
    Test::UnsignedLongLongList UnsignedLongLongSequence;
    Test::MultiArrayShort ShortMultiArray;
    Test::MultiArrayLongLong LongLongMultiArray;
    Test::MultiArrayUnsignedShort UnsignedShortMultiArray;
    Test::MultiArrayUnsignedLong UnsignedLongMultiArray;
    Test::MultiArrayUnsignedLongLong UnsignedLongLongMultiArray;
    ::CORBA::Boolean BooleanType;
    ::CORBA::Octet OctetType;
    Test::ArrayBoolean BooleanArray;
    Test::ArrayOctet OctetArray;
    Test::BooleanList BooleanSequence;
    Test::OctetList OctetSequence;
    Test::MultiArrayBoolean BooleanMultiArray;
    Test::MultiArrayOctet OctetMultiArray;
    Test::PrimitiveEnum TestEnum;
    Test::ArrayEnum EnumArray;
    Test::EnumList EnumSequence;
    Test::MultiArrayEnum EnumMultiArray;
    Test::LongBoundedList LongBoundedSequence;
    Test::StringBoundedList StringBoundedSequence;
    Test::WStringBoundedList WStringBoundedSequence;
    Test::StructBoundedList StructBoundedSequence;
    Test::LongDoubleBoundedList LongDoubleBoundedSequence;
    Test::BooleanBoundedList BooleanBoundedSequence;
    Test::EnumBoundedList EnumBoundedSequence;
  };

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:67

} // module Test

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:904

  template<>
  class Arg_Traits< ::Test::PrimitiveEnum>
    : public
        Basic_Arg_Traits_T<
            ::Test::PrimitiveEnum,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Test::NestedTestStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::NestedTestStruct,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::LongList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::LongList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::StringList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::StringList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::WStringList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::WStringList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::StructList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::StructList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayLong_var,
            ::Test::ArrayLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayString_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::ArrayString_out,
            ::Test::ArrayString_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayWString_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::ArrayWString_out,
            ::Test::ArrayWString_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayStruct_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::ArrayStruct_out,
            ::Test::ArrayStruct_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayLong_var,
            ::Test::MultiArrayLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayString_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::MultiArrayString_out,
            ::Test::MultiArrayString_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayWString_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::MultiArrayWString_out,
            ::Test::MultiArrayWString_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayStruct_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::MultiArrayStruct_out,
            ::Test::MultiArrayStruct_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayFloat_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayFloat_var,
            ::Test::ArrayFloat_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayDouble_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayDouble_var,
            ::Test::ArrayDouble_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayLongDouble_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayLongDouble_var,
            ::Test::ArrayLongDouble_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::FloatList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::FloatList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::DoubleList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::DoubleList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::LongDoubleList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::LongDoubleList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayFloat_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayFloat_var,
            ::Test::MultiArrayFloat_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayDouble_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayDouble_var,
            ::Test::MultiArrayDouble_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayLongDouble_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayLongDouble_var,
            ::Test::MultiArrayLongDouble_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayChar_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayChar_var,
            ::Test::ArrayChar_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayWChar_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayWChar_var,
            ::Test::ArrayWChar_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::CharList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::CharList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::WCharList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::WCharList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayChar_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayChar_var,
            ::Test::MultiArrayChar_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayWChar_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayWChar_var,
            ::Test::MultiArrayWChar_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayShort_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayShort_var,
            ::Test::ArrayShort_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayLongLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayLongLong_var,
            ::Test::ArrayLongLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayUnsignedShort_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayUnsignedShort_var,
            ::Test::ArrayUnsignedShort_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayUnsignedLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayUnsignedLong_var,
            ::Test::ArrayUnsignedLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayUnsignedLongLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayUnsignedLongLong_var,
            ::Test::ArrayUnsignedLongLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::ShortList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::ShortList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::LongLongList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::LongLongList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::UnsignedShortList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::UnsignedShortList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::UnsignedLongList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::UnsignedLongList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::UnsignedLongLongList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::UnsignedLongLongList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayShort_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayShort_var,
            ::Test::MultiArrayShort_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayLongLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayLongLong_var,
            ::Test::MultiArrayLongLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayUnsignedShort_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayUnsignedShort_var,
            ::Test::MultiArrayUnsignedShort_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayUnsignedLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayUnsignedLong_var,
            ::Test::MultiArrayUnsignedLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayUnsignedLongLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayUnsignedLongLong_var,
            ::Test::MultiArrayUnsignedLongLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayBoolean_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayBoolean_var,
            ::Test::ArrayBoolean_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayOctet_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayOctet_var,
            ::Test::ArrayOctet_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::BooleanList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::BooleanList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::OctetList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::OctetList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayBoolean_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayBoolean_var,
            ::Test::MultiArrayBoolean_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayOctet_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayOctet_var,
            ::Test::MultiArrayOctet_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::ArrayEnum_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::ArrayEnum_var,
            ::Test::ArrayEnum_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::EnumList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::EnumList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MultiArrayEnum_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Test::MultiArrayEnum_var,
            ::Test::MultiArrayEnum_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::LongBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::LongBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::StringBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::StringBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::WStringBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::WStringBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::StructBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::StructBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::LongDoubleBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::LongDoubleBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::BooleanBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::BooleanBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Test::EnumBoundedList>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::EnumBoundedList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Test::BasicTestStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::BasicTestStruct,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayLong_forany
    >
  {
    static void free (
        Test::ArrayLong_slice * _tao_slice);
    static Test::ArrayLong_slice * dup (
        const Test::ArrayLong_slice * _tao_slice);
    static void copy (
        Test::ArrayLong_slice * _tao_to,
        const Test::ArrayLong_slice * _tao_from);
    static Test::ArrayLong_slice * alloc (void);
    static void zero (
        Test::ArrayLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayString_forany
    >
  {
    static void free (
        Test::ArrayString_slice * _tao_slice);
    static Test::ArrayString_slice * dup (
        const Test::ArrayString_slice * _tao_slice);
    static void copy (
        Test::ArrayString_slice * _tao_to,
        const Test::ArrayString_slice * _tao_from);
    static Test::ArrayString_slice * alloc (void);
    static void zero (
        Test::ArrayString_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayWString_forany
    >
  {
    static void free (
        Test::ArrayWString_slice * _tao_slice);
    static Test::ArrayWString_slice * dup (
        const Test::ArrayWString_slice * _tao_slice);
    static void copy (
        Test::ArrayWString_slice * _tao_to,
        const Test::ArrayWString_slice * _tao_from);
    static Test::ArrayWString_slice * alloc (void);
    static void zero (
        Test::ArrayWString_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayStruct_forany
    >
  {
    static void free (
        Test::ArrayStruct_slice * _tao_slice);
    static Test::ArrayStruct_slice * dup (
        const Test::ArrayStruct_slice * _tao_slice);
    static void copy (
        Test::ArrayStruct_slice * _tao_to,
        const Test::ArrayStruct_slice * _tao_from);
    static Test::ArrayStruct_slice * alloc (void);
    static void zero (
        Test::ArrayStruct_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayLong_forany
    >
  {
    static void free (
        Test::MultiArrayLong_slice * _tao_slice);
    static Test::MultiArrayLong_slice * dup (
        const Test::MultiArrayLong_slice * _tao_slice);
    static void copy (
        Test::MultiArrayLong_slice * _tao_to,
        const Test::MultiArrayLong_slice * _tao_from);
    static Test::MultiArrayLong_slice * alloc (void);
    static void zero (
        Test::MultiArrayLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayString_forany
    >
  {
    static void free (
        Test::MultiArrayString_slice * _tao_slice);
    static Test::MultiArrayString_slice * dup (
        const Test::MultiArrayString_slice * _tao_slice);
    static void copy (
        Test::MultiArrayString_slice * _tao_to,
        const Test::MultiArrayString_slice * _tao_from);
    static Test::MultiArrayString_slice * alloc (void);
    static void zero (
        Test::MultiArrayString_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayWString_forany
    >
  {
    static void free (
        Test::MultiArrayWString_slice * _tao_slice);
    static Test::MultiArrayWString_slice * dup (
        const Test::MultiArrayWString_slice * _tao_slice);
    static void copy (
        Test::MultiArrayWString_slice * _tao_to,
        const Test::MultiArrayWString_slice * _tao_from);
    static Test::MultiArrayWString_slice * alloc (void);
    static void zero (
        Test::MultiArrayWString_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayStruct_forany
    >
  {
    static void free (
        Test::MultiArrayStruct_slice * _tao_slice);
    static Test::MultiArrayStruct_slice * dup (
        const Test::MultiArrayStruct_slice * _tao_slice);
    static void copy (
        Test::MultiArrayStruct_slice * _tao_to,
        const Test::MultiArrayStruct_slice * _tao_from);
    static Test::MultiArrayStruct_slice * alloc (void);
    static void zero (
        Test::MultiArrayStruct_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayFloat_forany
    >
  {
    static void free (
        Test::ArrayFloat_slice * _tao_slice);
    static Test::ArrayFloat_slice * dup (
        const Test::ArrayFloat_slice * _tao_slice);
    static void copy (
        Test::ArrayFloat_slice * _tao_to,
        const Test::ArrayFloat_slice * _tao_from);
    static Test::ArrayFloat_slice * alloc (void);
    static void zero (
        Test::ArrayFloat_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayDouble_forany
    >
  {
    static void free (
        Test::ArrayDouble_slice * _tao_slice);
    static Test::ArrayDouble_slice * dup (
        const Test::ArrayDouble_slice * _tao_slice);
    static void copy (
        Test::ArrayDouble_slice * _tao_to,
        const Test::ArrayDouble_slice * _tao_from);
    static Test::ArrayDouble_slice * alloc (void);
    static void zero (
        Test::ArrayDouble_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayLongDouble_forany
    >
  {
    static void free (
        Test::ArrayLongDouble_slice * _tao_slice);
    static Test::ArrayLongDouble_slice * dup (
        const Test::ArrayLongDouble_slice * _tao_slice);
    static void copy (
        Test::ArrayLongDouble_slice * _tao_to,
        const Test::ArrayLongDouble_slice * _tao_from);
    static Test::ArrayLongDouble_slice * alloc (void);
    static void zero (
        Test::ArrayLongDouble_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayFloat_forany
    >
  {
    static void free (
        Test::MultiArrayFloat_slice * _tao_slice);
    static Test::MultiArrayFloat_slice * dup (
        const Test::MultiArrayFloat_slice * _tao_slice);
    static void copy (
        Test::MultiArrayFloat_slice * _tao_to,
        const Test::MultiArrayFloat_slice * _tao_from);
    static Test::MultiArrayFloat_slice * alloc (void);
    static void zero (
        Test::MultiArrayFloat_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayDouble_forany
    >
  {
    static void free (
        Test::MultiArrayDouble_slice * _tao_slice);
    static Test::MultiArrayDouble_slice * dup (
        const Test::MultiArrayDouble_slice * _tao_slice);
    static void copy (
        Test::MultiArrayDouble_slice * _tao_to,
        const Test::MultiArrayDouble_slice * _tao_from);
    static Test::MultiArrayDouble_slice * alloc (void);
    static void zero (
        Test::MultiArrayDouble_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayLongDouble_forany
    >
  {
    static void free (
        Test::MultiArrayLongDouble_slice * _tao_slice);
    static Test::MultiArrayLongDouble_slice * dup (
        const Test::MultiArrayLongDouble_slice * _tao_slice);
    static void copy (
        Test::MultiArrayLongDouble_slice * _tao_to,
        const Test::MultiArrayLongDouble_slice * _tao_from);
    static Test::MultiArrayLongDouble_slice * alloc (void);
    static void zero (
        Test::MultiArrayLongDouble_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayChar_forany
    >
  {
    static void free (
        Test::ArrayChar_slice * _tao_slice);
    static Test::ArrayChar_slice * dup (
        const Test::ArrayChar_slice * _tao_slice);
    static void copy (
        Test::ArrayChar_slice * _tao_to,
        const Test::ArrayChar_slice * _tao_from);
    static Test::ArrayChar_slice * alloc (void);
    static void zero (
        Test::ArrayChar_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayWChar_forany
    >
  {
    static void free (
        Test::ArrayWChar_slice * _tao_slice);
    static Test::ArrayWChar_slice * dup (
        const Test::ArrayWChar_slice * _tao_slice);
    static void copy (
        Test::ArrayWChar_slice * _tao_to,
        const Test::ArrayWChar_slice * _tao_from);
    static Test::ArrayWChar_slice * alloc (void);
    static void zero (
        Test::ArrayWChar_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayChar_forany
    >
  {
    static void free (
        Test::MultiArrayChar_slice * _tao_slice);
    static Test::MultiArrayChar_slice * dup (
        const Test::MultiArrayChar_slice * _tao_slice);
    static void copy (
        Test::MultiArrayChar_slice * _tao_to,
        const Test::MultiArrayChar_slice * _tao_from);
    static Test::MultiArrayChar_slice * alloc (void);
    static void zero (
        Test::MultiArrayChar_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayWChar_forany
    >
  {
    static void free (
        Test::MultiArrayWChar_slice * _tao_slice);
    static Test::MultiArrayWChar_slice * dup (
        const Test::MultiArrayWChar_slice * _tao_slice);
    static void copy (
        Test::MultiArrayWChar_slice * _tao_to,
        const Test::MultiArrayWChar_slice * _tao_from);
    static Test::MultiArrayWChar_slice * alloc (void);
    static void zero (
        Test::MultiArrayWChar_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayShort_forany
    >
  {
    static void free (
        Test::ArrayShort_slice * _tao_slice);
    static Test::ArrayShort_slice * dup (
        const Test::ArrayShort_slice * _tao_slice);
    static void copy (
        Test::ArrayShort_slice * _tao_to,
        const Test::ArrayShort_slice * _tao_from);
    static Test::ArrayShort_slice * alloc (void);
    static void zero (
        Test::ArrayShort_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayLongLong_forany
    >
  {
    static void free (
        Test::ArrayLongLong_slice * _tao_slice);
    static Test::ArrayLongLong_slice * dup (
        const Test::ArrayLongLong_slice * _tao_slice);
    static void copy (
        Test::ArrayLongLong_slice * _tao_to,
        const Test::ArrayLongLong_slice * _tao_from);
    static Test::ArrayLongLong_slice * alloc (void);
    static void zero (
        Test::ArrayLongLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayUnsignedShort_forany
    >
  {
    static void free (
        Test::ArrayUnsignedShort_slice * _tao_slice);
    static Test::ArrayUnsignedShort_slice * dup (
        const Test::ArrayUnsignedShort_slice * _tao_slice);
    static void copy (
        Test::ArrayUnsignedShort_slice * _tao_to,
        const Test::ArrayUnsignedShort_slice * _tao_from);
    static Test::ArrayUnsignedShort_slice * alloc (void);
    static void zero (
        Test::ArrayUnsignedShort_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayUnsignedLong_forany
    >
  {
    static void free (
        Test::ArrayUnsignedLong_slice * _tao_slice);
    static Test::ArrayUnsignedLong_slice * dup (
        const Test::ArrayUnsignedLong_slice * _tao_slice);
    static void copy (
        Test::ArrayUnsignedLong_slice * _tao_to,
        const Test::ArrayUnsignedLong_slice * _tao_from);
    static Test::ArrayUnsignedLong_slice * alloc (void);
    static void zero (
        Test::ArrayUnsignedLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayUnsignedLongLong_forany
    >
  {
    static void free (
        Test::ArrayUnsignedLongLong_slice * _tao_slice);
    static Test::ArrayUnsignedLongLong_slice * dup (
        const Test::ArrayUnsignedLongLong_slice * _tao_slice);
    static void copy (
        Test::ArrayUnsignedLongLong_slice * _tao_to,
        const Test::ArrayUnsignedLongLong_slice * _tao_from);
    static Test::ArrayUnsignedLongLong_slice * alloc (void);
    static void zero (
        Test::ArrayUnsignedLongLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayShort_forany
    >
  {
    static void free (
        Test::MultiArrayShort_slice * _tao_slice);
    static Test::MultiArrayShort_slice * dup (
        const Test::MultiArrayShort_slice * _tao_slice);
    static void copy (
        Test::MultiArrayShort_slice * _tao_to,
        const Test::MultiArrayShort_slice * _tao_from);
    static Test::MultiArrayShort_slice * alloc (void);
    static void zero (
        Test::MultiArrayShort_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayLongLong_forany
    >
  {
    static void free (
        Test::MultiArrayLongLong_slice * _tao_slice);
    static Test::MultiArrayLongLong_slice * dup (
        const Test::MultiArrayLongLong_slice * _tao_slice);
    static void copy (
        Test::MultiArrayLongLong_slice * _tao_to,
        const Test::MultiArrayLongLong_slice * _tao_from);
    static Test::MultiArrayLongLong_slice * alloc (void);
    static void zero (
        Test::MultiArrayLongLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayUnsignedShort_forany
    >
  {
    static void free (
        Test::MultiArrayUnsignedShort_slice * _tao_slice);
    static Test::MultiArrayUnsignedShort_slice * dup (
        const Test::MultiArrayUnsignedShort_slice * _tao_slice);
    static void copy (
        Test::MultiArrayUnsignedShort_slice * _tao_to,
        const Test::MultiArrayUnsignedShort_slice * _tao_from);
    static Test::MultiArrayUnsignedShort_slice * alloc (void);
    static void zero (
        Test::MultiArrayUnsignedShort_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayUnsignedLong_forany
    >
  {
    static void free (
        Test::MultiArrayUnsignedLong_slice * _tao_slice);
    static Test::MultiArrayUnsignedLong_slice * dup (
        const Test::MultiArrayUnsignedLong_slice * _tao_slice);
    static void copy (
        Test::MultiArrayUnsignedLong_slice * _tao_to,
        const Test::MultiArrayUnsignedLong_slice * _tao_from);
    static Test::MultiArrayUnsignedLong_slice * alloc (void);
    static void zero (
        Test::MultiArrayUnsignedLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayUnsignedLongLong_forany
    >
  {
    static void free (
        Test::MultiArrayUnsignedLongLong_slice * _tao_slice);
    static Test::MultiArrayUnsignedLongLong_slice * dup (
        const Test::MultiArrayUnsignedLongLong_slice * _tao_slice);
    static void copy (
        Test::MultiArrayUnsignedLongLong_slice * _tao_to,
        const Test::MultiArrayUnsignedLongLong_slice * _tao_from);
    static Test::MultiArrayUnsignedLongLong_slice * alloc (void);
    static void zero (
        Test::MultiArrayUnsignedLongLong_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayBoolean_forany
    >
  {
    static void free (
        Test::ArrayBoolean_slice * _tao_slice);
    static Test::ArrayBoolean_slice * dup (
        const Test::ArrayBoolean_slice * _tao_slice);
    static void copy (
        Test::ArrayBoolean_slice * _tao_to,
        const Test::ArrayBoolean_slice * _tao_from);
    static Test::ArrayBoolean_slice * alloc (void);
    static void zero (
        Test::ArrayBoolean_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayOctet_forany
    >
  {
    static void free (
        Test::ArrayOctet_slice * _tao_slice);
    static Test::ArrayOctet_slice * dup (
        const Test::ArrayOctet_slice * _tao_slice);
    static void copy (
        Test::ArrayOctet_slice * _tao_to,
        const Test::ArrayOctet_slice * _tao_from);
    static Test::ArrayOctet_slice * alloc (void);
    static void zero (
        Test::ArrayOctet_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayBoolean_forany
    >
  {
    static void free (
        Test::MultiArrayBoolean_slice * _tao_slice);
    static Test::MultiArrayBoolean_slice * dup (
        const Test::MultiArrayBoolean_slice * _tao_slice);
    static void copy (
        Test::MultiArrayBoolean_slice * _tao_to,
        const Test::MultiArrayBoolean_slice * _tao_from);
    static Test::MultiArrayBoolean_slice * alloc (void);
    static void zero (
        Test::MultiArrayBoolean_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayOctet_forany
    >
  {
    static void free (
        Test::MultiArrayOctet_slice * _tao_slice);
    static Test::MultiArrayOctet_slice * dup (
        const Test::MultiArrayOctet_slice * _tao_slice);
    static void copy (
        Test::MultiArrayOctet_slice * _tao_to,
        const Test::MultiArrayOctet_slice * _tao_from);
    static Test::MultiArrayOctet_slice * alloc (void);
    static void zero (
        Test::MultiArrayOctet_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::ArrayEnum_forany
    >
  {
    static void free (
        Test::ArrayEnum_slice * _tao_slice);
    static Test::ArrayEnum_slice * dup (
        const Test::ArrayEnum_slice * _tao_slice);
    static void copy (
        Test::ArrayEnum_slice * _tao_to,
        const Test::ArrayEnum_slice * _tao_from);
    static Test::ArrayEnum_slice * alloc (void);
    static void zero (
        Test::ArrayEnum_slice * _tao_slice);
  };
  template<>
  struct TestPInvokeIdlIDL_Export Array_Traits<
      Test::MultiArrayEnum_forany
    >
  {
    static void free (
        Test::MultiArrayEnum_slice * _tao_slice);
    static Test::MultiArrayEnum_slice * dup (
        const Test::MultiArrayEnum_slice * _tao_slice);
    static void copy (
        Test::MultiArrayEnum_slice * _tao_to,
        const Test::MultiArrayEnum_slice * _tao_from);
    static Test::MultiArrayEnum_slice * alloc (void);
    static void zero (
        Test::MultiArrayEnum_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::PrimitiveEnum _tao_enumerator);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::PrimitiveEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::NestedTestStruct &);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::NestedTestStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_LongList_H_
#define _TAO_CDR_OP_Test_LongList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_LongList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_StringList_H_
#define _TAO_CDR_OP_Test_StringList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::StringList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::StringList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_StringList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_WStringList_H_
#define _TAO_CDR_OP_Test_WStringList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::WStringList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::WStringList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_WStringList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_StructList_H_
#define _TAO_CDR_OP_Test_StructList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::StructList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::StructList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_StructList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayString_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayString_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayWString_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayWString_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayStruct_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayStruct_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayString_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayString_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayWString_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayWString_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayStruct_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayStruct_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayFloat_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayFloat_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayDouble_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayDouble_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayLongDouble_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayLongDouble_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_FloatList_H_
#define _TAO_CDR_OP_Test_FloatList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::FloatList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::FloatList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_FloatList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_DoubleList_H_
#define _TAO_CDR_OP_Test_DoubleList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::DoubleList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::DoubleList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_DoubleList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_LongDoubleList_H_
#define _TAO_CDR_OP_Test_LongDoubleList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongDoubleList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongDoubleList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_LongDoubleList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayFloat_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayFloat_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayDouble_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayDouble_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayLongDouble_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayLongDouble_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayChar_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayChar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayWChar_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayWChar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_CharList_H_
#define _TAO_CDR_OP_Test_CharList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::CharList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::CharList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_CharList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_WCharList_H_
#define _TAO_CDR_OP_Test_WCharList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::WCharList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::WCharList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_WCharList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayChar_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayChar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayWChar_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayWChar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayShort_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayShort_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayLongLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayLongLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayUnsignedShort_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayUnsignedShort_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayUnsignedLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayUnsignedLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayUnsignedLongLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayUnsignedLongLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_ShortList_H_
#define _TAO_CDR_OP_Test_ShortList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ShortList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ShortList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_ShortList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_LongLongList_H_
#define _TAO_CDR_OP_Test_LongLongList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongLongList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongLongList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_LongLongList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_UnsignedShortList_H_
#define _TAO_CDR_OP_Test_UnsignedShortList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::UnsignedShortList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::UnsignedShortList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_UnsignedShortList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_UnsignedLongList_H_
#define _TAO_CDR_OP_Test_UnsignedLongList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::UnsignedLongList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::UnsignedLongList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_UnsignedLongList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_UnsignedLongLongList_H_
#define _TAO_CDR_OP_Test_UnsignedLongLongList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::UnsignedLongLongList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::UnsignedLongLongList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_UnsignedLongLongList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayShort_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayShort_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayLongLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayLongLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayUnsignedShort_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayUnsignedShort_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayUnsignedLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayUnsignedLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayUnsignedLongLong_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayUnsignedLongLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayBoolean_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayBoolean_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayOctet_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayOctet_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_BooleanList_H_
#define _TAO_CDR_OP_Test_BooleanList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::BooleanList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::BooleanList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_BooleanList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_OctetList_H_
#define _TAO_CDR_OP_Test_OctetList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::OctetList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::OctetList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_OctetList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayBoolean_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayBoolean_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayOctet_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayOctet_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::ArrayEnum_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ArrayEnum_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_EnumList_H_
#define _TAO_CDR_OP_Test_EnumList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::EnumList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::EnumList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_EnumList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MultiArrayEnum_forany &_tao_array);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MultiArrayEnum_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_LongBoundedList_H_
#define _TAO_CDR_OP_Test_LongBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_LongBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_StringBoundedList_H_
#define _TAO_CDR_OP_Test_StringBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::StringBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::StringBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_StringBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_WStringBoundedList_H_
#define _TAO_CDR_OP_Test_WStringBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::WStringBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::WStringBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_WStringBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_StructBoundedList_H_
#define _TAO_CDR_OP_Test_StructBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::StructBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::StructBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_StructBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_LongDoubleBoundedList_H_
#define _TAO_CDR_OP_Test_LongDoubleBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongDoubleBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongDoubleBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_LongDoubleBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_BooleanBoundedList_H_
#define _TAO_CDR_OP_Test_BooleanBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::BooleanBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::BooleanBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_BooleanBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Test_EnumBoundedList_H_
#define _TAO_CDR_OP_Test_EnumBoundedList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::EnumBoundedList &_tao_sequence);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::EnumBoundedList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_EnumBoundedList_H_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TestPInvokeIdlIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::BasicTestStruct &);
TestPInvokeIdlIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::BasicTestStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "TestPInvokeIdlC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

