/* Generated by E:\PROJECTS\OPENDDS\ext\OpenDDS\bin\opendds_idl version 3.13.2 (ACE version 6.2a_p15) running on input file TestPInvokeIdl.idl */
#include "TestPInvokeIdlTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/CorbaSeq/BooleanSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/CharSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/DoubleSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/FloatSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/LongDoubleSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/LongLongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/LongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/OctetSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/ShortSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/ULongLongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/ULongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/UShortSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/WCharSeqTypeSupportImpl.h"
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: Current */


/* End INTERFACE: Current */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyType */


/* End TYPEDEF: PolicyType */


/* Begin INTERFACE-FWD: Policy */


/* End INTERFACE-FWD: Policy */


/* Begin TYPEDEF: PolicyList */


/* End TYPEDEF: PolicyList */


/* Begin TYPEDEF: PolicyTypeSeq */


/* End TYPEDEF: PolicyTypeSeq */


/* Begin INTERFACE-FWD: PolicyCurrent */


/* End INTERFACE-FWD: PolicyCurrent */


/* Begin ENUM: SetOverrideType */


/* End ENUM: SetOverrideType */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyErrorCode */


/* End TYPEDEF: PolicyErrorCode */


/* Begin CONST: BAD_POLICY */


/* End CONST: BAD_POLICY */


/* Begin CONST: UNSUPPORTED_POLICY */


/* End CONST: UNSUPPORTED_POLICY */


/* Begin CONST: BAD_POLICY_TYPE */


/* End CONST: BAD_POLICY_TYPE */


/* Begin CONST: BAD_POLICY_VALUE */


/* End CONST: BAD_POLICY_VALUE */


/* Begin CONST: UNSUPPORTED_POLICY_VALUE */


/* End CONST: UNSUPPORTED_POLICY_VALUE */


/* Begin INTERFACE: Policy */


/* End INTERFACE: Policy */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyManager */


/* End INTERFACE: PolicyManager */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyCurrent */


/* End INTERFACE: PolicyCurrent */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ServiceType */


/* End TYPEDEF: ServiceType */


/* Begin TYPEDEF: ServiceOption */


/* End TYPEDEF: ServiceOption */


/* Begin TYPEDEF: ServiceDetailType */


/* End TYPEDEF: ServiceDetailType */


/* Begin TYPEDEF: ServiceDetailData */


/* End TYPEDEF: ServiceDetailData */


/* Begin TYPEDEF: ServiceOptionSeq */


/* End TYPEDEF: ServiceOptionSeq */


/* Begin CONST: Security */


/* End CONST: Security */


/* Begin STRUCT: ServiceDetail */


/* End STRUCT: ServiceDetail */


/* Begin TYPEDEF: ServiceDetailSeq */


/* End TYPEDEF: ServiceDetailSeq */


/* Begin STRUCT: ServiceInformation */


/* End STRUCT: ServiceInformation */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: ParameterMode */


/* End ENUM: ParameterMode */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ORBid */


/* End TYPEDEF: ORBid */


/* Begin TYPEDEF: Flags */


/* End TYPEDEF: Flags */


/* Begin TYPEDEF: Identifier */


/* End TYPEDEF: Identifier */


/* Begin TYPEDEF: RepositoryId */


/* End TYPEDEF: RepositoryId */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: TCKind */


/* End ENUM: TCKind */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin STRUCT: NamedValue */


/* End STRUCT: NamedValue */


/* Begin ENUM: exception_type */


/* End ENUM: exception_type */


/* Begin NATIVE: ValueFactory */


/* End NATIVE: ValueFactory */

/* End MODULE: CORBA */


/* Begin MODULE: Test */



/* Begin ENUM: PrimitiveEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Test::PrimitiveEnum& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, Test::PrimitiveEnum& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<Test::PrimitiveEnum>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_Test_PrimitiveEnum_names[] = {
  "ENUM1",
  "ENUM2",
  "ENUM3",
  "ENUM4",
  "ENUM5",
  "ENUM6",
  "ENUM7",
  "ENUM8",
  "ENUM9",
  "ENUM10",
  "ENUM11",
  "ENUM12"
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: PrimitiveEnum */


/* Begin STRUCT: NestedTestStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::NestedTestStruct& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.Id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.Message.in()) + 1;
}

bool operator<<(Serializer& strm, const Test::NestedTestStruct& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.Id)
    && (strm << stru.Message.in());
}

bool operator>>(Serializer& strm, Test::NestedTestStruct& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.Id)
    && (strm >> stru.Message.out());
}

size_t gen_max_marshaled_size(const Test::NestedTestStruct& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Test::NestedTestStruct> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Test::NestedTestStruct> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Test::NestedTestStruct> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Test::NestedTestStruct> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
::DDS::DataWriter_ptr NestedTestStructTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<NestedTestStruct> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr NestedTestStructTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<NestedTestStruct> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr NestedTestStructTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<NestedTestStruct> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<NestedTestStruct, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& NestedTestStructTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<NestedTestStruct>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool NestedTestStructTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* NestedTestStructTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

NestedTestStructTypeSupport::_ptr_type NestedTestStructTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Test::NestedTestStruct> : MetaStruct {
  typedef Test::NestedTestStruct T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Test::NestedTestStruct& typed = *static_cast<const Test::NestedTestStruct*>(stru);
    if (std::strcmp(field, "Id") == 0) {
      return typed.Id;
    }
    if (std::strcmp(field, "Message") == 0) {
      return typed.Message.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::NestedTestStruct)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "Id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'Id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'Id' could not be skipped");
      }
    }
    if (std::strcmp(field, "Message") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'Message' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'Message' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'Message' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Test::NestedTestStruct");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "Id") == 0) {
      return make_field_cmp(&T::Id, next);
    }
    if (std::strcmp(field, "Message") == 0) {
      return make_field_cmp(&T::Message, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::NestedTestStruct)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"Id", "Message", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "Id") == 0) {
      return &static_cast<const T*>(stru)->Id;
    }
    if (std::strcmp(field, "Message") == 0) {
      return &static_cast<const T*>(stru)->Message;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::NestedTestStruct)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "Id") == 0) {
      static_cast<T*>(lhs)->Id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "Message") == 0) {
      static_cast<T*>(lhs)->Message = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::NestedTestStruct)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "Id") == 0) {
      return static_cast<const T*>(lhs)->Id == static_cast<const T*>(rhs)->Id;
    }
    if (std::strcmp(field, "Message") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->Message.in(), static_cast<const T*>(rhs)->Message.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::NestedTestStruct)");
  }
};

template<>
const MetaStruct& getMetaStruct<Test::NestedTestStruct>()
{
  static MetaStructImpl<Test::NestedTestStruct> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Test::NestedTestStruct*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Test::NestedTestStruct>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: NestedTestStruct */


/* Begin TYPEDEF: LongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::LongList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Test::LongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_long_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::LongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_long_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::LongList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongList */


/* Begin TYPEDEF: StringList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::StringList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    find_size_ulong(size, padding);
    if (seq[i]) {
      size += ACE_OS::strlen(seq[i]) + 1;
    }
  }
}

bool operator<<(Serializer& strm, const Test::StringList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::StringList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq.get_buffer()[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::StringList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StringList */


/* Begin TYPEDEF: WStringList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::WStringList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    find_size_ulong(size, padding);
    if (seq[i]) {
      size += ACE_OS::strlen(seq[i]) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
    }
  }
}

bool operator<<(Serializer& strm, const Test::WStringList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::WStringList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq.get_buffer()[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::WStringList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WStringList */


/* Begin TYPEDEF: StructList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::StructList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    gen_find_size(seq[i], size, padding);
  }
}

bool operator<<(Serializer& strm, const Test::StructList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::StructList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::StructList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    if (!gen_skip_over(ser, static_cast<Test::NestedTestStruct*>(0))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StructList */


/* Begin TYPEDEF: ArrayLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 5 * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Test::ArrayLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_long_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_long_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayLong */


/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayString_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    find_size_ulong(size, padding);
    size += ACE_OS::strlen(arr[i0].in()) + 1;
  }
}

bool operator<<(Serializer& strm, const Test::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm << arr[i0].in())) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm >> arr[i0].out())) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayString_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 10; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayString */


/* Begin TYPEDEF: ArrayWString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayWString_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 4; ++i0) {
    find_size_ulong(size, padding);
    size += ACE_OS::strlen(arr[i0].in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
  }
}

bool operator<<(Serializer& strm, const Test::ArrayWString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 4; ++i0) {
    if (!(strm << arr[i0].in())) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::ArrayWString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 4; ++i0) {
    if (!(strm >> arr[i0].out())) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayWString_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 4; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayWString */


/* Begin TYPEDEF: ArrayStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayStruct_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
    gen_find_size(arr[i0], size, padding);
  }
}

bool operator<<(Serializer& strm, const Test::ArrayStruct_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::ArrayStruct_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
    if (!(strm >> arr[i0])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayStruct_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 5; ++i) {
    if (!gen_skip_over(ser, static_cast<Test::NestedTestStruct*>(0))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayStruct */


/* Begin TYPEDEF: MultiArrayLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 24 * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Test::MultiArrayLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_long_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_long_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayLong */


/* Begin TYPEDEF: MultiArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayString_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        find_size_ulong(size, padding);
        size += ACE_OS::strlen(arr[i0][i1][i2].in()) + 1;
      }
    }
  }
}

bool operator<<(Serializer& strm, const Test::MultiArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm << arr[i0][i1][i2].in())) {
          return false;
        }
      }
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::MultiArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm >> arr[i0][i1][i2].out())) {
          return false;
        }
      }
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayString_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 24; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayString */


/* Begin TYPEDEF: MultiArrayWString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayWString_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        find_size_ulong(size, padding);
        size += ACE_OS::strlen(arr[i0][i1][i2].in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
      }
    }
  }
}

bool operator<<(Serializer& strm, const Test::MultiArrayWString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm << arr[i0][i1][i2].in())) {
          return false;
        }
      }
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::MultiArrayWString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm >> arr[i0][i1][i2].out())) {
          return false;
        }
      }
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayWString_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 24; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayWString */


/* Begin TYPEDEF: MultiArrayStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayStruct_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        gen_find_size(arr[i0][i1][i2], size, padding);
      }
    }
  }
}

bool operator<<(Serializer& strm, const Test::MultiArrayStruct_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm << arr[i0][i1][i2])) {
          return false;
        }
      }
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::MultiArrayStruct_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm >> arr[i0][i1][i2])) {
          return false;
        }
      }
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayStruct_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 24; ++i) {
    if (!gen_skip_over(ser, static_cast<Test::NestedTestStruct*>(0))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayStruct */


/* Begin TYPEDEF: ArrayFloat */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayFloat_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 5 * gen_max_marshaled_size(CORBA::Float());
}

bool operator<<(Serializer& strm, const Test::ArrayFloat_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_float_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayFloat_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_float_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayFloat_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayFloat */


/* Begin TYPEDEF: ArrayDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayDouble_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 5 * gen_max_marshaled_size(CORBA::Double());
}

bool operator<<(Serializer& strm, const Test::ArrayDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_double_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_double_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayDouble_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayDouble */


/* Begin TYPEDEF: ArrayLongDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayLongDouble_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 5 * gen_max_marshaled_size(CORBA::LongDouble());
}

bool operator<<(Serializer& strm, const Test::ArrayLongDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_longdouble_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayLongDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_longdouble_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayLongDouble_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 16);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayLongDouble */


/* Begin TYPEDEF: FloatList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::FloatList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Float());
}

bool operator<<(Serializer& strm, const Test::FloatList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_float_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::FloatList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_float_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::FloatList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FloatList */


/* Begin TYPEDEF: DoubleList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::DoubleList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  if ((size + padding) % 8) {
    padding += 4;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Double());
}

bool operator<<(Serializer& strm, const Test::DoubleList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_double_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::DoubleList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_double_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::DoubleList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: DoubleList */


/* Begin TYPEDEF: LongDoubleList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::LongDoubleList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  if ((size + padding) % 8) {
    padding += 4;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::LongDouble());
}

bool operator<<(Serializer& strm, const Test::LongDoubleList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_longdouble_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::LongDoubleList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_longdouble_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::LongDoubleList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 16);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongDoubleList */


/* Begin TYPEDEF: MultiArrayFloat */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayFloat_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 24 * gen_max_marshaled_size(CORBA::Float());
}

bool operator<<(Serializer& strm, const Test::MultiArrayFloat_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_float_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayFloat_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_float_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayFloat_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayFloat */


/* Begin TYPEDEF: MultiArrayDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayDouble_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 24 * gen_max_marshaled_size(CORBA::Double());
}

bool operator<<(Serializer& strm, const Test::MultiArrayDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_double_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_double_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayDouble_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayDouble */


/* Begin TYPEDEF: MultiArrayLongDouble */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayLongDouble_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 24 * gen_max_marshaled_size(CORBA::LongDouble());
}

bool operator<<(Serializer& strm, const Test::MultiArrayLongDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_longdouble_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayLongDouble_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_longdouble_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayLongDouble_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 16);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayLongDouble */


/* Begin TYPEDEF: ArrayChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayChar_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 5 * max_marshaled_size_char();
}

bool operator<<(Serializer& strm, const Test::ArrayChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_char_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_char_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayChar_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayChar */


/* Begin TYPEDEF: ArrayWChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayWChar_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 5 * max_marshaled_size_wchar();
}

bool operator<<(Serializer& strm, const Test::ArrayWChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_wchar_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayWChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_wchar_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayWChar_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 5; ++i) {
    ACE_CDR::Octet o;
    if (!(ser >> ACE_InputCDR::to_octet(o))) return false;
    if (!ser.skip(o)) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayWChar */


/* Begin TYPEDEF: CharList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::CharList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_char();
}

bool operator<<(Serializer& strm, const Test::CharList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_char_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::CharList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_char_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::CharList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: CharList */


/* Begin TYPEDEF: WCharList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::WCharList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_wchar();
}

bool operator<<(Serializer& strm, const Test::WCharList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_wchar_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::WCharList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_wchar_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::WCharList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    ACE_CDR::Octet o;
    if (!(ser >> ACE_InputCDR::to_octet(o))) return false;
    if (!ser.skip(o)) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WCharList */


/* Begin TYPEDEF: MultiArrayChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayChar_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 24 * max_marshaled_size_char();
}

bool operator<<(Serializer& strm, const Test::MultiArrayChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_char_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_char_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayChar_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayChar */


/* Begin TYPEDEF: MultiArrayWChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayWChar_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 24 * max_marshaled_size_wchar();
}

bool operator<<(Serializer& strm, const Test::MultiArrayWChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_wchar_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayWChar_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_wchar_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayWChar_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 24; ++i) {
    ACE_CDR::Octet o;
    if (!(ser >> ACE_InputCDR::to_octet(o))) return false;
    if (!ser.skip(o)) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayWChar */


/* Begin TYPEDEF: ArrayShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayShort_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += 5 * gen_max_marshaled_size(CORBA::Short());
}

bool operator<<(Serializer& strm, const Test::ArrayShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_short_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_short_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayShort_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayShort */


/* Begin TYPEDEF: ArrayLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayLongLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 5 * gen_max_marshaled_size(CORBA::LongLong());
}

bool operator<<(Serializer& strm, const Test::ArrayLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_longlong_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_longlong_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayLongLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayLongLong */


/* Begin TYPEDEF: ArrayUnsignedShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayUnsignedShort_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += 5 * gen_max_marshaled_size(CORBA::UShort());
}

bool operator<<(Serializer& strm, const Test::ArrayUnsignedShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ushort_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayUnsignedShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ushort_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayUnsignedShort_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayUnsignedShort */


/* Begin TYPEDEF: ArrayUnsignedLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayUnsignedLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 5 * gen_max_marshaled_size(CORBA::ULong());
}

bool operator<<(Serializer& strm, const Test::ArrayUnsignedLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ulong_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayUnsignedLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ulong_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayUnsignedLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayUnsignedLong */


/* Begin TYPEDEF: ArrayUnsignedLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayUnsignedLongLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 5 * gen_max_marshaled_size(CORBA::ULongLong());
}

bool operator<<(Serializer& strm, const Test::ArrayUnsignedLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ulonglong_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayUnsignedLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ulonglong_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayUnsignedLongLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayUnsignedLongLong */


/* Begin TYPEDEF: ShortList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ShortList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Short());
}

bool operator<<(Serializer& strm, const Test::ShortList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_short_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::ShortList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_short_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ShortList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ShortList */


/* Begin TYPEDEF: LongLongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::LongLongList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  if ((size + padding) % 8) {
    padding += 4;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::LongLong());
}

bool operator<<(Serializer& strm, const Test::LongLongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_longlong_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::LongLongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_longlong_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::LongLongList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongLongList */


/* Begin TYPEDEF: UnsignedShortList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::UnsignedShortList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::UShort());
}

bool operator<<(Serializer& strm, const Test::UnsignedShortList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_ushort_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::UnsignedShortList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_ushort_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::UnsignedShortList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedShortList */


/* Begin TYPEDEF: UnsignedLongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::UnsignedLongList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::ULong());
}

bool operator<<(Serializer& strm, const Test::UnsignedLongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_ulong_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::UnsignedLongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_ulong_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::UnsignedLongList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedLongList */


/* Begin TYPEDEF: UnsignedLongLongList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::UnsignedLongLongList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  if ((size + padding) % 8) {
    padding += 4;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::ULongLong());
}

bool operator<<(Serializer& strm, const Test::UnsignedLongLongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_ulonglong_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::UnsignedLongLongList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_ulonglong_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::UnsignedLongLongList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedLongLongList */


/* Begin TYPEDEF: MultiArrayShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayShort_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += 24 * gen_max_marshaled_size(CORBA::Short());
}

bool operator<<(Serializer& strm, const Test::MultiArrayShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_short_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_short_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayShort_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayShort */


/* Begin TYPEDEF: MultiArrayLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayLongLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 24 * gen_max_marshaled_size(CORBA::LongLong());
}

bool operator<<(Serializer& strm, const Test::MultiArrayLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_longlong_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_longlong_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayLongLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayLongLong */


/* Begin TYPEDEF: MultiArrayUnsignedShort */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayUnsignedShort_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += 24 * gen_max_marshaled_size(CORBA::UShort());
}

bool operator<<(Serializer& strm, const Test::MultiArrayUnsignedShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ushort_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayUnsignedShort_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ushort_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayUnsignedShort_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayUnsignedShort */


/* Begin TYPEDEF: MultiArrayUnsignedLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayUnsignedLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 24 * gen_max_marshaled_size(CORBA::ULong());
}

bool operator<<(Serializer& strm, const Test::MultiArrayUnsignedLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ulong_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayUnsignedLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ulong_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayUnsignedLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayUnsignedLong */


/* Begin TYPEDEF: MultiArrayUnsignedLongLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayUnsignedLongLong_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 24 * gen_max_marshaled_size(CORBA::ULongLong());
}

bool operator<<(Serializer& strm, const Test::MultiArrayUnsignedLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ulonglong_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayUnsignedLongLong_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ulonglong_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayUnsignedLongLong_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayUnsignedLongLong */


/* Begin TYPEDEF: ArrayBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayBoolean_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 5 * max_marshaled_size_boolean();
}

bool operator<<(Serializer& strm, const Test::ArrayBoolean_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_boolean_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayBoolean_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_boolean_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayBoolean_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayBoolean */


/* Begin TYPEDEF: ArrayOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayOctet_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 5 * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const Test::ArrayOctet_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_octet_array(arr.in(), 5);
}

bool operator>>(Serializer& strm, Test::ArrayOctet_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_octet_array(arr.out(), 5);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayOctet_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOctet */


/* Begin TYPEDEF: BooleanList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::BooleanList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_boolean();
}

bool operator<<(Serializer& strm, const Test::BooleanList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_boolean_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::BooleanList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_boolean_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::BooleanList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BooleanList */


/* Begin TYPEDEF: OctetList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::OctetList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const Test::OctetList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_octet_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::OctetList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_octet_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::OctetList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetList */


/* Begin TYPEDEF: MultiArrayBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayBoolean_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 24 * max_marshaled_size_boolean();
}

bool operator<<(Serializer& strm, const Test::MultiArrayBoolean_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_boolean_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayBoolean_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_boolean_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayBoolean_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayBoolean */


/* Begin TYPEDEF: MultiArrayOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayOctet_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 24 * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const Test::MultiArrayOctet_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_octet_array(arr.in()[0][0], 24);
}

bool operator>>(Serializer& strm, Test::MultiArrayOctet_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_octet_array(arr.out()[0][0], 24);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayOctet_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayOctet */


/* Begin TYPEDEF: ArrayEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::ArrayEnum_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += 4 * max_marshaled_size_ulong();
}

bool operator<<(Serializer& strm, const Test::ArrayEnum_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::ArrayEnum_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
    if (!(strm >> arr[i0])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::ArrayEnum_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(5), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayEnum */


/* Begin TYPEDEF: EnumList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::EnumList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_ulong();
}

bool operator<<(Serializer& strm, const Test::EnumList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::EnumList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::EnumList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: EnumList */


/* Begin TYPEDEF: MultiArrayEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::MultiArrayEnum_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += 23 * max_marshaled_size_ulong();
}

bool operator<<(Serializer& strm, const Test::MultiArrayEnum_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm << arr[i0][i1][i2])) {
          return false;
        }
      }
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::MultiArrayEnum_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
      for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
        if (!(strm >> arr[i0][i1][i2])) {
          return false;
        }
      }
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::MultiArrayEnum_forany*)
{
  ACE_UNUSED_ARG(ser);
  return ser.skip(static_cast<ACE_UINT16>(24), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiArrayEnum */


/* Begin TYPEDEF: LongBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::LongBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Test::LongBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_long_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::LongBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_long_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::LongBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongBoundedList */


/* Begin TYPEDEF: StringBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::StringBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    find_size_ulong(size, padding);
    if (seq[i]) {
      size += ACE_OS::strlen(seq[i]) + 1;
    }
  }
}

bool operator<<(Serializer& strm, const Test::StringBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::StringBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq.get_buffer()[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::StringBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StringBoundedList */


/* Begin TYPEDEF: WStringBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::WStringBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    find_size_ulong(size, padding);
    if (seq[i]) {
      size += ACE_OS::strlen(seq[i]) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
    }
  }
}

bool operator<<(Serializer& strm, const Test::WStringBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::WStringBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq.get_buffer()[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::WStringBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength)) return false;
    if (!ser.skip(static_cast<ACE_UINT16>(strlength))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WStringBoundedList */


/* Begin TYPEDEF: StructBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::StructBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    gen_find_size(seq[i], size, padding);
  }
}

bool operator<<(Serializer& strm, const Test::StructBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::StructBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::StructBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    if (!gen_skip_over(ser, static_cast<Test::NestedTestStruct*>(0))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StructBoundedList */


/* Begin TYPEDEF: LongDoubleBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::LongDoubleBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  if ((size + padding) % 8) {
    padding += 4;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::LongDouble());
}

bool operator<<(Serializer& strm, const Test::LongDoubleBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_longdouble_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::LongDoubleBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_longdouble_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::LongDoubleBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 16);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongDoubleBoundedList */


/* Begin TYPEDEF: BooleanBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::BooleanBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_boolean();
}

bool operator<<(Serializer& strm, const Test::BooleanBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_boolean_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Test::BooleanBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_boolean_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::BooleanBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BooleanBoundedList */


/* Begin TYPEDEF: EnumBoundedList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::EnumBoundedList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_ulong();
}

bool operator<<(Serializer& strm, const Test::EnumBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Test::EnumBoundedList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Test::EnumBoundedList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: EnumBoundedList */


/* Begin STRUCT: BasicTestStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::BasicTestStruct& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  Test::ArrayLong_forany stru_LongArray(const_cast<Test::ArrayLong_slice*>(stru.LongArray));
  Test::ArrayString_forany stru_StringArray(const_cast<Test::ArrayString_slice*>(stru.StringArray));
  Test::ArrayWString_forany stru_WStringArray(const_cast<Test::ArrayWString_slice*>(stru.WStringArray));
  Test::ArrayStruct_forany stru_StructArray(const_cast<Test::ArrayStruct_slice*>(stru.StructArray));
  Test::MultiArrayLong_forany stru_LongMultiArray(const_cast<Test::MultiArrayLong_slice*>(stru.LongMultiArray));
  Test::MultiArrayString_forany stru_StringMultiArray(const_cast<Test::MultiArrayString_slice*>(stru.StringMultiArray));
  Test::MultiArrayWString_forany stru_WStringMultiArray(const_cast<Test::MultiArrayWString_slice*>(stru.WStringMultiArray));
  Test::MultiArrayStruct_forany stru_StructMultiArray(const_cast<Test::MultiArrayStruct_slice*>(stru.StructMultiArray));
  Test::ArrayFloat_forany stru_FloatArray(const_cast<Test::ArrayFloat_slice*>(stru.FloatArray));
  Test::ArrayDouble_forany stru_DoubleArray(const_cast<Test::ArrayDouble_slice*>(stru.DoubleArray));
  Test::ArrayLongDouble_forany stru_LongDoubleArray(const_cast<Test::ArrayLongDouble_slice*>(stru.LongDoubleArray));
  Test::MultiArrayFloat_forany stru_FloatMultiArray(const_cast<Test::MultiArrayFloat_slice*>(stru.FloatMultiArray));
  Test::MultiArrayDouble_forany stru_DoubleMultiArray(const_cast<Test::MultiArrayDouble_slice*>(stru.DoubleMultiArray));
  Test::MultiArrayLongDouble_forany stru_LongDoubleMultiArray(const_cast<Test::MultiArrayLongDouble_slice*>(stru.LongDoubleMultiArray));
  Test::ArrayChar_forany stru_CharArray(const_cast<Test::ArrayChar_slice*>(stru.CharArray));
  Test::ArrayWChar_forany stru_WCharArray(const_cast<Test::ArrayWChar_slice*>(stru.WCharArray));
  Test::MultiArrayChar_forany stru_CharMultiArray(const_cast<Test::MultiArrayChar_slice*>(stru.CharMultiArray));
  Test::MultiArrayWChar_forany stru_WCharMultiArray(const_cast<Test::MultiArrayWChar_slice*>(stru.WCharMultiArray));
  Test::ArrayShort_forany stru_ShortArray(const_cast<Test::ArrayShort_slice*>(stru.ShortArray));
  Test::ArrayLongLong_forany stru_LongLongArray(const_cast<Test::ArrayLongLong_slice*>(stru.LongLongArray));
  Test::ArrayUnsignedShort_forany stru_UnsignedShortArray(const_cast<Test::ArrayUnsignedShort_slice*>(stru.UnsignedShortArray));
  Test::ArrayUnsignedLong_forany stru_UnsignedLongArray(const_cast<Test::ArrayUnsignedLong_slice*>(stru.UnsignedLongArray));
  Test::ArrayUnsignedLongLong_forany stru_UnsignedLongLongArray(const_cast<Test::ArrayUnsignedLongLong_slice*>(stru.UnsignedLongLongArray));
  Test::MultiArrayShort_forany stru_ShortMultiArray(const_cast<Test::MultiArrayShort_slice*>(stru.ShortMultiArray));
  Test::MultiArrayLongLong_forany stru_LongLongMultiArray(const_cast<Test::MultiArrayLongLong_slice*>(stru.LongLongMultiArray));
  Test::MultiArrayUnsignedShort_forany stru_UnsignedShortMultiArray(const_cast<Test::MultiArrayUnsignedShort_slice*>(stru.UnsignedShortMultiArray));
  Test::MultiArrayUnsignedLong_forany stru_UnsignedLongMultiArray(const_cast<Test::MultiArrayUnsignedLong_slice*>(stru.UnsignedLongMultiArray));
  Test::MultiArrayUnsignedLongLong_forany stru_UnsignedLongLongMultiArray(const_cast<Test::MultiArrayUnsignedLongLong_slice*>(stru.UnsignedLongLongMultiArray));
  Test::ArrayBoolean_forany stru_BooleanArray(const_cast<Test::ArrayBoolean_slice*>(stru.BooleanArray));
  Test::ArrayOctet_forany stru_OctetArray(const_cast<Test::ArrayOctet_slice*>(stru.OctetArray));
  Test::MultiArrayBoolean_forany stru_BooleanMultiArray(const_cast<Test::MultiArrayBoolean_slice*>(stru.BooleanMultiArray));
  Test::MultiArrayOctet_forany stru_OctetMultiArray(const_cast<Test::MultiArrayOctet_slice*>(stru.OctetMultiArray));
  Test::ArrayEnum_forany stru_EnumArray(const_cast<Test::ArrayEnum_slice*>(stru.EnumArray));
  Test::MultiArrayEnum_forany stru_EnumMultiArray(const_cast<Test::MultiArrayEnum_slice*>(stru.EnumMultiArray));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.Id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.Message.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.WMessage.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
  gen_find_size(stru.LongSequence, size, padding);
  gen_find_size(stru.StringSequence, size, padding);
  gen_find_size(stru.WStringSequence, size, padding);
  gen_find_size(stru_LongArray, size, padding);
  gen_find_size(stru_StringArray, size, padding);
  gen_find_size(stru_WStringArray, size, padding);
  gen_find_size(stru.StructTest, size, padding);
  gen_find_size(stru.StructSequence, size, padding);
  gen_find_size(stru_StructArray, size, padding);
  gen_find_size(stru_LongMultiArray, size, padding);
  gen_find_size(stru_StringMultiArray, size, padding);
  gen_find_size(stru_WStringMultiArray, size, padding);
  gen_find_size(stru_StructMultiArray, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.FloatType);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.DoubleType);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.LongDoubleType);
  gen_find_size(stru_FloatArray, size, padding);
  gen_find_size(stru_DoubleArray, size, padding);
  gen_find_size(stru_LongDoubleArray, size, padding);
  gen_find_size(stru.FloatSequence, size, padding);
  gen_find_size(stru.DoubleSequence, size, padding);
  gen_find_size(stru.LongDoubleSequence, size, padding);
  gen_find_size(stru_FloatMultiArray, size, padding);
  gen_find_size(stru_DoubleMultiArray, size, padding);
  gen_find_size(stru_LongDoubleMultiArray, size, padding);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.CharType));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_wchar(stru.WCharType));
  gen_find_size(stru_CharArray, size, padding);
  gen_find_size(stru_WCharArray, size, padding);
  gen_find_size(stru.CharSequence, size, padding);
  gen_find_size(stru.WCharSequence, size, padding);
  gen_find_size(stru_CharMultiArray, size, padding);
  gen_find_size(stru_WCharMultiArray, size, padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.ShortType);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.LongLongType);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.UnsignedShortType);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.UnsignedLongType);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.UnsignedLongLongType);
  gen_find_size(stru_ShortArray, size, padding);
  gen_find_size(stru_LongLongArray, size, padding);
  gen_find_size(stru_UnsignedShortArray, size, padding);
  gen_find_size(stru_UnsignedLongArray, size, padding);
  gen_find_size(stru_UnsignedLongLongArray, size, padding);
  gen_find_size(stru.ShortSequence, size, padding);
  gen_find_size(stru.LongLongSequence, size, padding);
  gen_find_size(stru.UnsignedShortSequence, size, padding);
  gen_find_size(stru.UnsignedLongSequence, size, padding);
  gen_find_size(stru.UnsignedLongLongSequence, size, padding);
  gen_find_size(stru_ShortMultiArray, size, padding);
  gen_find_size(stru_LongLongMultiArray, size, padding);
  gen_find_size(stru_UnsignedShortMultiArray, size, padding);
  gen_find_size(stru_UnsignedLongMultiArray, size, padding);
  gen_find_size(stru_UnsignedLongLongMultiArray, size, padding);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_boolean(stru.BooleanType));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.OctetType));
  gen_find_size(stru_BooleanArray, size, padding);
  gen_find_size(stru_OctetArray, size, padding);
  gen_find_size(stru.BooleanSequence, size, padding);
  gen_find_size(stru.OctetSequence, size, padding);
  gen_find_size(stru_BooleanMultiArray, size, padding);
  gen_find_size(stru_OctetMultiArray, size, padding);
  find_size_ulong(size, padding);
  gen_find_size(stru_EnumArray, size, padding);
  gen_find_size(stru.EnumSequence, size, padding);
  gen_find_size(stru_EnumMultiArray, size, padding);
  gen_find_size(stru.LongBoundedSequence, size, padding);
  gen_find_size(stru.StringBoundedSequence, size, padding);
  gen_find_size(stru.WStringBoundedSequence, size, padding);
  gen_find_size(stru.StructBoundedSequence, size, padding);
  gen_find_size(stru.LongDoubleBoundedSequence, size, padding);
  gen_find_size(stru.BooleanBoundedSequence, size, padding);
  gen_find_size(stru.EnumBoundedSequence, size, padding);
}

bool operator<<(Serializer& strm, const Test::BasicTestStruct& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Test::ArrayLong_forany stru_LongArray(const_cast<Test::ArrayLong_slice*>(stru.LongArray));
  Test::ArrayString_forany stru_StringArray(const_cast<Test::ArrayString_slice*>(stru.StringArray));
  Test::ArrayWString_forany stru_WStringArray(const_cast<Test::ArrayWString_slice*>(stru.WStringArray));
  Test::ArrayStruct_forany stru_StructArray(const_cast<Test::ArrayStruct_slice*>(stru.StructArray));
  Test::MultiArrayLong_forany stru_LongMultiArray(const_cast<Test::MultiArrayLong_slice*>(stru.LongMultiArray));
  Test::MultiArrayString_forany stru_StringMultiArray(const_cast<Test::MultiArrayString_slice*>(stru.StringMultiArray));
  Test::MultiArrayWString_forany stru_WStringMultiArray(const_cast<Test::MultiArrayWString_slice*>(stru.WStringMultiArray));
  Test::MultiArrayStruct_forany stru_StructMultiArray(const_cast<Test::MultiArrayStruct_slice*>(stru.StructMultiArray));
  Test::ArrayFloat_forany stru_FloatArray(const_cast<Test::ArrayFloat_slice*>(stru.FloatArray));
  Test::ArrayDouble_forany stru_DoubleArray(const_cast<Test::ArrayDouble_slice*>(stru.DoubleArray));
  Test::ArrayLongDouble_forany stru_LongDoubleArray(const_cast<Test::ArrayLongDouble_slice*>(stru.LongDoubleArray));
  Test::MultiArrayFloat_forany stru_FloatMultiArray(const_cast<Test::MultiArrayFloat_slice*>(stru.FloatMultiArray));
  Test::MultiArrayDouble_forany stru_DoubleMultiArray(const_cast<Test::MultiArrayDouble_slice*>(stru.DoubleMultiArray));
  Test::MultiArrayLongDouble_forany stru_LongDoubleMultiArray(const_cast<Test::MultiArrayLongDouble_slice*>(stru.LongDoubleMultiArray));
  Test::ArrayChar_forany stru_CharArray(const_cast<Test::ArrayChar_slice*>(stru.CharArray));
  Test::ArrayWChar_forany stru_WCharArray(const_cast<Test::ArrayWChar_slice*>(stru.WCharArray));
  Test::MultiArrayChar_forany stru_CharMultiArray(const_cast<Test::MultiArrayChar_slice*>(stru.CharMultiArray));
  Test::MultiArrayWChar_forany stru_WCharMultiArray(const_cast<Test::MultiArrayWChar_slice*>(stru.WCharMultiArray));
  Test::ArrayShort_forany stru_ShortArray(const_cast<Test::ArrayShort_slice*>(stru.ShortArray));
  Test::ArrayLongLong_forany stru_LongLongArray(const_cast<Test::ArrayLongLong_slice*>(stru.LongLongArray));
  Test::ArrayUnsignedShort_forany stru_UnsignedShortArray(const_cast<Test::ArrayUnsignedShort_slice*>(stru.UnsignedShortArray));
  Test::ArrayUnsignedLong_forany stru_UnsignedLongArray(const_cast<Test::ArrayUnsignedLong_slice*>(stru.UnsignedLongArray));
  Test::ArrayUnsignedLongLong_forany stru_UnsignedLongLongArray(const_cast<Test::ArrayUnsignedLongLong_slice*>(stru.UnsignedLongLongArray));
  Test::MultiArrayShort_forany stru_ShortMultiArray(const_cast<Test::MultiArrayShort_slice*>(stru.ShortMultiArray));
  Test::MultiArrayLongLong_forany stru_LongLongMultiArray(const_cast<Test::MultiArrayLongLong_slice*>(stru.LongLongMultiArray));
  Test::MultiArrayUnsignedShort_forany stru_UnsignedShortMultiArray(const_cast<Test::MultiArrayUnsignedShort_slice*>(stru.UnsignedShortMultiArray));
  Test::MultiArrayUnsignedLong_forany stru_UnsignedLongMultiArray(const_cast<Test::MultiArrayUnsignedLong_slice*>(stru.UnsignedLongMultiArray));
  Test::MultiArrayUnsignedLongLong_forany stru_UnsignedLongLongMultiArray(const_cast<Test::MultiArrayUnsignedLongLong_slice*>(stru.UnsignedLongLongMultiArray));
  Test::ArrayBoolean_forany stru_BooleanArray(const_cast<Test::ArrayBoolean_slice*>(stru.BooleanArray));
  Test::ArrayOctet_forany stru_OctetArray(const_cast<Test::ArrayOctet_slice*>(stru.OctetArray));
  Test::MultiArrayBoolean_forany stru_BooleanMultiArray(const_cast<Test::MultiArrayBoolean_slice*>(stru.BooleanMultiArray));
  Test::MultiArrayOctet_forany stru_OctetMultiArray(const_cast<Test::MultiArrayOctet_slice*>(stru.OctetMultiArray));
  Test::ArrayEnum_forany stru_EnumArray(const_cast<Test::ArrayEnum_slice*>(stru.EnumArray));
  Test::MultiArrayEnum_forany stru_EnumMultiArray(const_cast<Test::MultiArrayEnum_slice*>(stru.EnumMultiArray));
  return (strm << stru.Id)
    && (strm << stru.Message.in())
    && (strm << stru.WMessage.in())
    && (strm << stru.LongSequence)
    && (strm << stru.StringSequence)
    && (strm << stru.WStringSequence)
    && (strm << stru_LongArray)
    && (strm << stru_StringArray)
    && (strm << stru_WStringArray)
    && (strm << stru.StructTest)
    && (strm << stru.StructSequence)
    && (strm << stru_StructArray)
    && (strm << stru_LongMultiArray)
    && (strm << stru_StringMultiArray)
    && (strm << stru_WStringMultiArray)
    && (strm << stru_StructMultiArray)
    && (strm << stru.FloatType)
    && (strm << stru.DoubleType)
    && (strm << stru.LongDoubleType)
    && (strm << stru_FloatArray)
    && (strm << stru_DoubleArray)
    && (strm << stru_LongDoubleArray)
    && (strm << stru.FloatSequence)
    && (strm << stru.DoubleSequence)
    && (strm << stru.LongDoubleSequence)
    && (strm << stru_FloatMultiArray)
    && (strm << stru_DoubleMultiArray)
    && (strm << stru_LongDoubleMultiArray)
    && (strm << ACE_OutputCDR::from_char(stru.CharType))
    && (strm << ACE_OutputCDR::from_wchar(stru.WCharType))
    && (strm << stru_CharArray)
    && (strm << stru_WCharArray)
    && (strm << stru.CharSequence)
    && (strm << stru.WCharSequence)
    && (strm << stru_CharMultiArray)
    && (strm << stru_WCharMultiArray)
    && (strm << stru.ShortType)
    && (strm << stru.LongLongType)
    && (strm << stru.UnsignedShortType)
    && (strm << stru.UnsignedLongType)
    && (strm << stru.UnsignedLongLongType)
    && (strm << stru_ShortArray)
    && (strm << stru_LongLongArray)
    && (strm << stru_UnsignedShortArray)
    && (strm << stru_UnsignedLongArray)
    && (strm << stru_UnsignedLongLongArray)
    && (strm << stru.ShortSequence)
    && (strm << stru.LongLongSequence)
    && (strm << stru.UnsignedShortSequence)
    && (strm << stru.UnsignedLongSequence)
    && (strm << stru.UnsignedLongLongSequence)
    && (strm << stru_ShortMultiArray)
    && (strm << stru_LongLongMultiArray)
    && (strm << stru_UnsignedShortMultiArray)
    && (strm << stru_UnsignedLongMultiArray)
    && (strm << stru_UnsignedLongLongMultiArray)
    && (strm << ACE_OutputCDR::from_boolean(stru.BooleanType))
    && (strm << ACE_OutputCDR::from_octet(stru.OctetType))
    && (strm << stru_BooleanArray)
    && (strm << stru_OctetArray)
    && (strm << stru.BooleanSequence)
    && (strm << stru.OctetSequence)
    && (strm << stru_BooleanMultiArray)
    && (strm << stru_OctetMultiArray)
    && (strm << stru.TestEnum)
    && (strm << stru_EnumArray)
    && (strm << stru.EnumSequence)
    && (strm << stru_EnumMultiArray)
    && (strm << stru.LongBoundedSequence)
    && (strm << stru.StringBoundedSequence)
    && (strm << stru.WStringBoundedSequence)
    && (strm << stru.StructBoundedSequence)
    && (strm << stru.LongDoubleBoundedSequence)
    && (strm << stru.BooleanBoundedSequence)
    && (strm << stru.EnumBoundedSequence);
}

bool operator>>(Serializer& strm, Test::BasicTestStruct& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Test::ArrayLong_forany stru_LongArray(const_cast<Test::ArrayLong_slice*>(stru.LongArray));
  Test::ArrayString_forany stru_StringArray(const_cast<Test::ArrayString_slice*>(stru.StringArray));
  Test::ArrayWString_forany stru_WStringArray(const_cast<Test::ArrayWString_slice*>(stru.WStringArray));
  Test::ArrayStruct_forany stru_StructArray(const_cast<Test::ArrayStruct_slice*>(stru.StructArray));
  Test::MultiArrayLong_forany stru_LongMultiArray(const_cast<Test::MultiArrayLong_slice*>(stru.LongMultiArray));
  Test::MultiArrayString_forany stru_StringMultiArray(const_cast<Test::MultiArrayString_slice*>(stru.StringMultiArray));
  Test::MultiArrayWString_forany stru_WStringMultiArray(const_cast<Test::MultiArrayWString_slice*>(stru.WStringMultiArray));
  Test::MultiArrayStruct_forany stru_StructMultiArray(const_cast<Test::MultiArrayStruct_slice*>(stru.StructMultiArray));
  Test::ArrayFloat_forany stru_FloatArray(const_cast<Test::ArrayFloat_slice*>(stru.FloatArray));
  Test::ArrayDouble_forany stru_DoubleArray(const_cast<Test::ArrayDouble_slice*>(stru.DoubleArray));
  Test::ArrayLongDouble_forany stru_LongDoubleArray(const_cast<Test::ArrayLongDouble_slice*>(stru.LongDoubleArray));
  Test::MultiArrayFloat_forany stru_FloatMultiArray(const_cast<Test::MultiArrayFloat_slice*>(stru.FloatMultiArray));
  Test::MultiArrayDouble_forany stru_DoubleMultiArray(const_cast<Test::MultiArrayDouble_slice*>(stru.DoubleMultiArray));
  Test::MultiArrayLongDouble_forany stru_LongDoubleMultiArray(const_cast<Test::MultiArrayLongDouble_slice*>(stru.LongDoubleMultiArray));
  Test::ArrayChar_forany stru_CharArray(const_cast<Test::ArrayChar_slice*>(stru.CharArray));
  Test::ArrayWChar_forany stru_WCharArray(const_cast<Test::ArrayWChar_slice*>(stru.WCharArray));
  Test::MultiArrayChar_forany stru_CharMultiArray(const_cast<Test::MultiArrayChar_slice*>(stru.CharMultiArray));
  Test::MultiArrayWChar_forany stru_WCharMultiArray(const_cast<Test::MultiArrayWChar_slice*>(stru.WCharMultiArray));
  Test::ArrayShort_forany stru_ShortArray(const_cast<Test::ArrayShort_slice*>(stru.ShortArray));
  Test::ArrayLongLong_forany stru_LongLongArray(const_cast<Test::ArrayLongLong_slice*>(stru.LongLongArray));
  Test::ArrayUnsignedShort_forany stru_UnsignedShortArray(const_cast<Test::ArrayUnsignedShort_slice*>(stru.UnsignedShortArray));
  Test::ArrayUnsignedLong_forany stru_UnsignedLongArray(const_cast<Test::ArrayUnsignedLong_slice*>(stru.UnsignedLongArray));
  Test::ArrayUnsignedLongLong_forany stru_UnsignedLongLongArray(const_cast<Test::ArrayUnsignedLongLong_slice*>(stru.UnsignedLongLongArray));
  Test::MultiArrayShort_forany stru_ShortMultiArray(const_cast<Test::MultiArrayShort_slice*>(stru.ShortMultiArray));
  Test::MultiArrayLongLong_forany stru_LongLongMultiArray(const_cast<Test::MultiArrayLongLong_slice*>(stru.LongLongMultiArray));
  Test::MultiArrayUnsignedShort_forany stru_UnsignedShortMultiArray(const_cast<Test::MultiArrayUnsignedShort_slice*>(stru.UnsignedShortMultiArray));
  Test::MultiArrayUnsignedLong_forany stru_UnsignedLongMultiArray(const_cast<Test::MultiArrayUnsignedLong_slice*>(stru.UnsignedLongMultiArray));
  Test::MultiArrayUnsignedLongLong_forany stru_UnsignedLongLongMultiArray(const_cast<Test::MultiArrayUnsignedLongLong_slice*>(stru.UnsignedLongLongMultiArray));
  Test::ArrayBoolean_forany stru_BooleanArray(const_cast<Test::ArrayBoolean_slice*>(stru.BooleanArray));
  Test::ArrayOctet_forany stru_OctetArray(const_cast<Test::ArrayOctet_slice*>(stru.OctetArray));
  Test::MultiArrayBoolean_forany stru_BooleanMultiArray(const_cast<Test::MultiArrayBoolean_slice*>(stru.BooleanMultiArray));
  Test::MultiArrayOctet_forany stru_OctetMultiArray(const_cast<Test::MultiArrayOctet_slice*>(stru.OctetMultiArray));
  Test::ArrayEnum_forany stru_EnumArray(const_cast<Test::ArrayEnum_slice*>(stru.EnumArray));
  Test::MultiArrayEnum_forany stru_EnumMultiArray(const_cast<Test::MultiArrayEnum_slice*>(stru.EnumMultiArray));
  return (strm >> stru.Id)
    && (strm >> stru.Message.out())
    && (strm >> stru.WMessage.out())
    && (strm >> stru.LongSequence)
    && (strm >> stru.StringSequence)
    && (strm >> stru.WStringSequence)
    && (strm >> stru_LongArray)
    && (strm >> stru_StringArray)
    && (strm >> stru_WStringArray)
    && (strm >> stru.StructTest)
    && (strm >> stru.StructSequence)
    && (strm >> stru_StructArray)
    && (strm >> stru_LongMultiArray)
    && (strm >> stru_StringMultiArray)
    && (strm >> stru_WStringMultiArray)
    && (strm >> stru_StructMultiArray)
    && (strm >> stru.FloatType)
    && (strm >> stru.DoubleType)
    && (strm >> stru.LongDoubleType)
    && (strm >> stru_FloatArray)
    && (strm >> stru_DoubleArray)
    && (strm >> stru_LongDoubleArray)
    && (strm >> stru.FloatSequence)
    && (strm >> stru.DoubleSequence)
    && (strm >> stru.LongDoubleSequence)
    && (strm >> stru_FloatMultiArray)
    && (strm >> stru_DoubleMultiArray)
    && (strm >> stru_LongDoubleMultiArray)
    && (strm >> ACE_InputCDR::to_char(stru.CharType))
    && (strm >> ACE_InputCDR::to_wchar(stru.WCharType))
    && (strm >> stru_CharArray)
    && (strm >> stru_WCharArray)
    && (strm >> stru.CharSequence)
    && (strm >> stru.WCharSequence)
    && (strm >> stru_CharMultiArray)
    && (strm >> stru_WCharMultiArray)
    && (strm >> stru.ShortType)
    && (strm >> stru.LongLongType)
    && (strm >> stru.UnsignedShortType)
    && (strm >> stru.UnsignedLongType)
    && (strm >> stru.UnsignedLongLongType)
    && (strm >> stru_ShortArray)
    && (strm >> stru_LongLongArray)
    && (strm >> stru_UnsignedShortArray)
    && (strm >> stru_UnsignedLongArray)
    && (strm >> stru_UnsignedLongLongArray)
    && (strm >> stru.ShortSequence)
    && (strm >> stru.LongLongSequence)
    && (strm >> stru.UnsignedShortSequence)
    && (strm >> stru.UnsignedLongSequence)
    && (strm >> stru.UnsignedLongLongSequence)
    && (strm >> stru_ShortMultiArray)
    && (strm >> stru_LongLongMultiArray)
    && (strm >> stru_UnsignedShortMultiArray)
    && (strm >> stru_UnsignedLongMultiArray)
    && (strm >> stru_UnsignedLongLongMultiArray)
    && (strm >> ACE_InputCDR::to_boolean(stru.BooleanType))
    && (strm >> ACE_InputCDR::to_octet(stru.OctetType))
    && (strm >> stru_BooleanArray)
    && (strm >> stru_OctetArray)
    && (strm >> stru.BooleanSequence)
    && (strm >> stru.OctetSequence)
    && (strm >> stru_BooleanMultiArray)
    && (strm >> stru_OctetMultiArray)
    && (strm >> stru.TestEnum)
    && (strm >> stru_EnumArray)
    && (strm >> stru.EnumSequence)
    && (strm >> stru_EnumMultiArray)
    && (strm >> stru.LongBoundedSequence)
    && (strm >> stru.StringBoundedSequence)
    && (strm >> stru.WStringBoundedSequence)
    && (strm >> stru.StructBoundedSequence)
    && (strm >> stru.LongDoubleBoundedSequence)
    && (strm >> stru.BooleanBoundedSequence)
    && (strm >> stru.EnumBoundedSequence);
}

size_t gen_max_marshaled_size(const Test::BasicTestStruct& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Test::BasicTestStruct> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Test::BasicTestStruct> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Test::BasicTestStruct> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Test::BasicTestStruct> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
::DDS::DataWriter_ptr BasicTestStructTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<BasicTestStruct> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr BasicTestStructTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<BasicTestStruct> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr BasicTestStructTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<BasicTestStruct> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<BasicTestStruct, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& BasicTestStructTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<BasicTestStruct>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool BasicTestStructTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* BasicTestStructTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

BasicTestStructTypeSupport::_ptr_type BasicTestStructTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Test::BasicTestStruct> : MetaStruct {
  typedef Test::BasicTestStruct T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Test::BasicTestStruct& typed = *static_cast<const Test::BasicTestStruct*>(stru);
    if (std::strcmp(field, "Id") == 0) {
      return typed.Id;
    }
    if (std::strcmp(field, "Message") == 0) {
      return typed.Message.in();
    }
    if (std::strcmp(field, "WMessage") == 0) {
      return typed.WMessage.in();
    }
    if (std::strncmp(field, "StructTest.", 11) == 0) {
      return getMetaStruct<Test::NestedTestStruct>().getValue(&typed.StructTest, field + 11);
    }
    if (std::strcmp(field, "FloatType") == 0) {
      return typed.FloatType;
    }
    if (std::strcmp(field, "DoubleType") == 0) {
      return typed.DoubleType;
    }
    if (std::strcmp(field, "LongDoubleType") == 0) {
      return typed.LongDoubleType;
    }
    if (std::strcmp(field, "CharType") == 0) {
      return typed.CharType;
    }
    if (std::strcmp(field, "WCharType") == 0) {
      return typed.WCharType;
    }
    if (std::strcmp(field, "ShortType") == 0) {
      return typed.ShortType;
    }
    if (std::strcmp(field, "LongLongType") == 0) {
      return typed.LongLongType;
    }
    if (std::strcmp(field, "UnsignedShortType") == 0) {
      return typed.UnsignedShortType;
    }
    if (std::strcmp(field, "UnsignedLongType") == 0) {
      return typed.UnsignedLongType;
    }
    if (std::strcmp(field, "UnsignedLongLongType") == 0) {
      return typed.UnsignedLongLongType;
    }
    if (std::strcmp(field, "BooleanType") == 0) {
      return typed.BooleanType;
    }
    if (std::strcmp(field, "OctetType") == 0) {
      return typed.OctetType;
    }
    if (std::strcmp(field, "TestEnum") == 0) {
      return gen_Test_PrimitiveEnum_names[typed.TestEnum];
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::BasicTestStruct)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "Id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'Id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'Id' could not be skipped");
      }
    }
    if (std::strcmp(field, "Message") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'Message' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'Message' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'Message' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "WMessage") == 0) {
      TAO::WString_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'WMessage' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'WMessage' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'WMessage' contents could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::LongList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::StringList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::WStringList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayWString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strncmp(field, "StructTest.", 11) == 0) {
      return getMetaStruct<Test::NestedTestStruct>().getValue(ser, field + 11);
    } else {
      if (!gen_skip_over(ser, static_cast<Test::NestedTestStruct*>(0))) {
        throw std::runtime_error("Field 'StructTest' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::StructList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayStruct_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayWString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayStruct_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "FloatType") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'FloatType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'FloatType' could not be skipped");
      }
    }
    if (std::strcmp(field, "DoubleType") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'DoubleType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'DoubleType' could not be skipped");
      }
    }
    if (std::strcmp(field, "LongDoubleType") == 0) {
      ACE_CDR::LongDouble val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'LongDoubleType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 16)) {
        throw std::runtime_error("Field 'LongDoubleType' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayFloat_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayDouble_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayLongDouble_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::FloatList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::DoubleList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::LongDoubleList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayFloat_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayDouble_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayLongDouble_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "CharType") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'CharType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'CharType' could not be skipped");
      }
    }
    if (std::strcmp(field, "WCharType") == 0) {
      ACE_CDR::WChar val;
      if (!(ser >> ACE_InputCDR::to_wchar(val))) {
        throw std::runtime_error("Field 'WCharType' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::Octet len;
      if (!(ser >> ACE_InputCDR::to_octet(len))) {
        throw std::runtime_error("WChar 'WCharType' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("WChar 'WCharType' contents could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayChar_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayWChar_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::CharList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::WCharList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayChar_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayWChar_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "ShortType") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'ShortType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'ShortType' could not be skipped");
      }
    }
    if (std::strcmp(field, "LongLongType") == 0) {
      ACE_CDR::LongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'LongLongType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'LongLongType' could not be skipped");
      }
    }
    if (std::strcmp(field, "UnsignedShortType") == 0) {
      ACE_CDR::UShort val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'UnsignedShortType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'UnsignedShortType' could not be skipped");
      }
    }
    if (std::strcmp(field, "UnsignedLongType") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'UnsignedLongType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'UnsignedLongType' could not be skipped");
      }
    }
    if (std::strcmp(field, "UnsignedLongLongType") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'UnsignedLongLongType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'UnsignedLongLongType' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayShort_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayLongLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayUnsignedShort_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayUnsignedLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayUnsignedLongLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ShortList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::LongLongList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::UnsignedShortList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::UnsignedLongList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::UnsignedLongLongList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayShort_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayLongLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayUnsignedShort_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayUnsignedLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayUnsignedLongLong_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "BooleanType") == 0) {
      ACE_CDR::Boolean val;
      if (!(ser >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'BooleanType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'BooleanType' could not be skipped");
      }
    }
    if (std::strcmp(field, "OctetType") == 0) {
      ACE_CDR::Octet val;
      if (!(ser >> ACE_InputCDR::to_octet(val))) {
        throw std::runtime_error("Field 'OctetType' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'OctetType' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayBoolean_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayOctet_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::BooleanList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::OctetList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayBoolean_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayOctet_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "TestEnum") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'TestEnum' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'TestEnum' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Test::ArrayEnum_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::EnumList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::MultiArrayEnum_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::LongBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::StringBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::WStringBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::StructBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::LongDoubleBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::BooleanBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<Test::EnumBoundedList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Test::BasicTestStruct");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "Id") == 0) {
      return make_field_cmp(&T::Id, next);
    }
    if (std::strcmp(field, "Message") == 0) {
      return make_field_cmp(&T::Message, next);
    }
    if (std::strcmp(field, "WMessage") == 0) {
      return make_field_cmp(&T::WMessage, next);
    }
    if (std::strncmp(field, "StructTest.", 11) == 0) {
      return make_struct_cmp(&T::StructTest, getMetaStruct<Test::NestedTestStruct>().create_qc_comparator(field + 11), next);
    }
    if (std::strcmp(field, "FloatType") == 0) {
      return make_field_cmp(&T::FloatType, next);
    }
    if (std::strcmp(field, "DoubleType") == 0) {
      return make_field_cmp(&T::DoubleType, next);
    }
    if (std::strcmp(field, "LongDoubleType") == 0) {
      return make_field_cmp(&T::LongDoubleType, next);
    }
    if (std::strcmp(field, "CharType") == 0) {
      return make_field_cmp(&T::CharType, next);
    }
    if (std::strcmp(field, "WCharType") == 0) {
      return make_field_cmp(&T::WCharType, next);
    }
    if (std::strcmp(field, "ShortType") == 0) {
      return make_field_cmp(&T::ShortType, next);
    }
    if (std::strcmp(field, "LongLongType") == 0) {
      return make_field_cmp(&T::LongLongType, next);
    }
    if (std::strcmp(field, "UnsignedShortType") == 0) {
      return make_field_cmp(&T::UnsignedShortType, next);
    }
    if (std::strcmp(field, "UnsignedLongType") == 0) {
      return make_field_cmp(&T::UnsignedLongType, next);
    }
    if (std::strcmp(field, "UnsignedLongLongType") == 0) {
      return make_field_cmp(&T::UnsignedLongLongType, next);
    }
    if (std::strcmp(field, "BooleanType") == 0) {
      return make_field_cmp(&T::BooleanType, next);
    }
    if (std::strcmp(field, "OctetType") == 0) {
      return make_field_cmp(&T::OctetType, next);
    }
    if (std::strcmp(field, "TestEnum") == 0) {
      return make_field_cmp(&T::TestEnum, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::BasicTestStruct)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"Id", "Message", "WMessage", "LongSequence", "StringSequence", "WStringSequence", "LongArray", "StringArray", "WStringArray", "StructTest", "StructSequence", "StructArray", "LongMultiArray", "StringMultiArray", "WStringMultiArray", "StructMultiArray", "FloatType", "DoubleType", "LongDoubleType", "FloatArray", "DoubleArray", "LongDoubleArray", "FloatSequence", "DoubleSequence", "LongDoubleSequence", "FloatMultiArray", "DoubleMultiArray", "LongDoubleMultiArray", "CharType", "WCharType", "CharArray", "WCharArray", "CharSequence", "WCharSequence", "CharMultiArray", "WCharMultiArray", "ShortType", "LongLongType", "UnsignedShortType", "UnsignedLongType", "UnsignedLongLongType", "ShortArray", "LongLongArray", "UnsignedShortArray", "UnsignedLongArray", "UnsignedLongLongArray", "ShortSequence", "LongLongSequence", "UnsignedShortSequence", "UnsignedLongSequence", "UnsignedLongLongSequence", "ShortMultiArray", "LongLongMultiArray", "UnsignedShortMultiArray", "UnsignedLongMultiArray", "UnsignedLongLongMultiArray", "BooleanType", "OctetType", "BooleanArray", "OctetArray", "BooleanSequence", "OctetSequence", "BooleanMultiArray", "OctetMultiArray", "TestEnum", "EnumArray", "EnumSequence", "EnumMultiArray", "LongBoundedSequence", "StringBoundedSequence", "WStringBoundedSequence", "StructBoundedSequence", "LongDoubleBoundedSequence", "BooleanBoundedSequence", "EnumBoundedSequence", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "Id") == 0) {
      return &static_cast<const T*>(stru)->Id;
    }
    if (std::strcmp(field, "Message") == 0) {
      return &static_cast<const T*>(stru)->Message;
    }
    if (std::strcmp(field, "WMessage") == 0) {
      return &static_cast<const T*>(stru)->WMessage;
    }
    if (std::strcmp(field, "LongSequence") == 0) {
      return &static_cast<const T*>(stru)->LongSequence;
    }
    if (std::strcmp(field, "StringSequence") == 0) {
      return &static_cast<const T*>(stru)->StringSequence;
    }
    if (std::strcmp(field, "WStringSequence") == 0) {
      return &static_cast<const T*>(stru)->WStringSequence;
    }
    if (std::strcmp(field, "LongArray") == 0) {
      return &static_cast<const T*>(stru)->LongArray;
    }
    if (std::strcmp(field, "StringArray") == 0) {
      return &static_cast<const T*>(stru)->StringArray;
    }
    if (std::strcmp(field, "WStringArray") == 0) {
      return &static_cast<const T*>(stru)->WStringArray;
    }
    if (std::strcmp(field, "StructTest") == 0) {
      return &static_cast<const T*>(stru)->StructTest;
    }
    if (std::strcmp(field, "StructSequence") == 0) {
      return &static_cast<const T*>(stru)->StructSequence;
    }
    if (std::strcmp(field, "StructArray") == 0) {
      return &static_cast<const T*>(stru)->StructArray;
    }
    if (std::strcmp(field, "LongMultiArray") == 0) {
      return &static_cast<const T*>(stru)->LongMultiArray;
    }
    if (std::strcmp(field, "StringMultiArray") == 0) {
      return &static_cast<const T*>(stru)->StringMultiArray;
    }
    if (std::strcmp(field, "WStringMultiArray") == 0) {
      return &static_cast<const T*>(stru)->WStringMultiArray;
    }
    if (std::strcmp(field, "StructMultiArray") == 0) {
      return &static_cast<const T*>(stru)->StructMultiArray;
    }
    if (std::strcmp(field, "FloatType") == 0) {
      return &static_cast<const T*>(stru)->FloatType;
    }
    if (std::strcmp(field, "DoubleType") == 0) {
      return &static_cast<const T*>(stru)->DoubleType;
    }
    if (std::strcmp(field, "LongDoubleType") == 0) {
      return &static_cast<const T*>(stru)->LongDoubleType;
    }
    if (std::strcmp(field, "FloatArray") == 0) {
      return &static_cast<const T*>(stru)->FloatArray;
    }
    if (std::strcmp(field, "DoubleArray") == 0) {
      return &static_cast<const T*>(stru)->DoubleArray;
    }
    if (std::strcmp(field, "LongDoubleArray") == 0) {
      return &static_cast<const T*>(stru)->LongDoubleArray;
    }
    if (std::strcmp(field, "FloatSequence") == 0) {
      return &static_cast<const T*>(stru)->FloatSequence;
    }
    if (std::strcmp(field, "DoubleSequence") == 0) {
      return &static_cast<const T*>(stru)->DoubleSequence;
    }
    if (std::strcmp(field, "LongDoubleSequence") == 0) {
      return &static_cast<const T*>(stru)->LongDoubleSequence;
    }
    if (std::strcmp(field, "FloatMultiArray") == 0) {
      return &static_cast<const T*>(stru)->FloatMultiArray;
    }
    if (std::strcmp(field, "DoubleMultiArray") == 0) {
      return &static_cast<const T*>(stru)->DoubleMultiArray;
    }
    if (std::strcmp(field, "LongDoubleMultiArray") == 0) {
      return &static_cast<const T*>(stru)->LongDoubleMultiArray;
    }
    if (std::strcmp(field, "CharType") == 0) {
      return &static_cast<const T*>(stru)->CharType;
    }
    if (std::strcmp(field, "WCharType") == 0) {
      return &static_cast<const T*>(stru)->WCharType;
    }
    if (std::strcmp(field, "CharArray") == 0) {
      return &static_cast<const T*>(stru)->CharArray;
    }
    if (std::strcmp(field, "WCharArray") == 0) {
      return &static_cast<const T*>(stru)->WCharArray;
    }
    if (std::strcmp(field, "CharSequence") == 0) {
      return &static_cast<const T*>(stru)->CharSequence;
    }
    if (std::strcmp(field, "WCharSequence") == 0) {
      return &static_cast<const T*>(stru)->WCharSequence;
    }
    if (std::strcmp(field, "CharMultiArray") == 0) {
      return &static_cast<const T*>(stru)->CharMultiArray;
    }
    if (std::strcmp(field, "WCharMultiArray") == 0) {
      return &static_cast<const T*>(stru)->WCharMultiArray;
    }
    if (std::strcmp(field, "ShortType") == 0) {
      return &static_cast<const T*>(stru)->ShortType;
    }
    if (std::strcmp(field, "LongLongType") == 0) {
      return &static_cast<const T*>(stru)->LongLongType;
    }
    if (std::strcmp(field, "UnsignedShortType") == 0) {
      return &static_cast<const T*>(stru)->UnsignedShortType;
    }
    if (std::strcmp(field, "UnsignedLongType") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongType;
    }
    if (std::strcmp(field, "UnsignedLongLongType") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongLongType;
    }
    if (std::strcmp(field, "ShortArray") == 0) {
      return &static_cast<const T*>(stru)->ShortArray;
    }
    if (std::strcmp(field, "LongLongArray") == 0) {
      return &static_cast<const T*>(stru)->LongLongArray;
    }
    if (std::strcmp(field, "UnsignedShortArray") == 0) {
      return &static_cast<const T*>(stru)->UnsignedShortArray;
    }
    if (std::strcmp(field, "UnsignedLongArray") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongArray;
    }
    if (std::strcmp(field, "UnsignedLongLongArray") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongLongArray;
    }
    if (std::strcmp(field, "ShortSequence") == 0) {
      return &static_cast<const T*>(stru)->ShortSequence;
    }
    if (std::strcmp(field, "LongLongSequence") == 0) {
      return &static_cast<const T*>(stru)->LongLongSequence;
    }
    if (std::strcmp(field, "UnsignedShortSequence") == 0) {
      return &static_cast<const T*>(stru)->UnsignedShortSequence;
    }
    if (std::strcmp(field, "UnsignedLongSequence") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongSequence;
    }
    if (std::strcmp(field, "UnsignedLongLongSequence") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongLongSequence;
    }
    if (std::strcmp(field, "ShortMultiArray") == 0) {
      return &static_cast<const T*>(stru)->ShortMultiArray;
    }
    if (std::strcmp(field, "LongLongMultiArray") == 0) {
      return &static_cast<const T*>(stru)->LongLongMultiArray;
    }
    if (std::strcmp(field, "UnsignedShortMultiArray") == 0) {
      return &static_cast<const T*>(stru)->UnsignedShortMultiArray;
    }
    if (std::strcmp(field, "UnsignedLongMultiArray") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongMultiArray;
    }
    if (std::strcmp(field, "UnsignedLongLongMultiArray") == 0) {
      return &static_cast<const T*>(stru)->UnsignedLongLongMultiArray;
    }
    if (std::strcmp(field, "BooleanType") == 0) {
      return &static_cast<const T*>(stru)->BooleanType;
    }
    if (std::strcmp(field, "OctetType") == 0) {
      return &static_cast<const T*>(stru)->OctetType;
    }
    if (std::strcmp(field, "BooleanArray") == 0) {
      return &static_cast<const T*>(stru)->BooleanArray;
    }
    if (std::strcmp(field, "OctetArray") == 0) {
      return &static_cast<const T*>(stru)->OctetArray;
    }
    if (std::strcmp(field, "BooleanSequence") == 0) {
      return &static_cast<const T*>(stru)->BooleanSequence;
    }
    if (std::strcmp(field, "OctetSequence") == 0) {
      return &static_cast<const T*>(stru)->OctetSequence;
    }
    if (std::strcmp(field, "BooleanMultiArray") == 0) {
      return &static_cast<const T*>(stru)->BooleanMultiArray;
    }
    if (std::strcmp(field, "OctetMultiArray") == 0) {
      return &static_cast<const T*>(stru)->OctetMultiArray;
    }
    if (std::strcmp(field, "TestEnum") == 0) {
      return &static_cast<const T*>(stru)->TestEnum;
    }
    if (std::strcmp(field, "EnumArray") == 0) {
      return &static_cast<const T*>(stru)->EnumArray;
    }
    if (std::strcmp(field, "EnumSequence") == 0) {
      return &static_cast<const T*>(stru)->EnumSequence;
    }
    if (std::strcmp(field, "EnumMultiArray") == 0) {
      return &static_cast<const T*>(stru)->EnumMultiArray;
    }
    if (std::strcmp(field, "LongBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->LongBoundedSequence;
    }
    if (std::strcmp(field, "StringBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->StringBoundedSequence;
    }
    if (std::strcmp(field, "WStringBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->WStringBoundedSequence;
    }
    if (std::strcmp(field, "StructBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->StructBoundedSequence;
    }
    if (std::strcmp(field, "LongDoubleBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->LongDoubleBoundedSequence;
    }
    if (std::strcmp(field, "BooleanBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->BooleanBoundedSequence;
    }
    if (std::strcmp(field, "EnumBoundedSequence") == 0) {
      return &static_cast<const T*>(stru)->EnumBoundedSequence;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::BasicTestStruct)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "Id") == 0) {
      static_cast<T*>(lhs)->Id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "Message") == 0) {
      static_cast<T*>(lhs)->Message = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "WMessage") == 0) {
      static_cast<T*>(lhs)->WMessage = *static_cast<const TAO::WString_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongSequence") == 0) {
      static_cast<T*>(lhs)->LongSequence = *static_cast<const Test::LongList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "StringSequence") == 0) {
      static_cast<T*>(lhs)->StringSequence = *static_cast<const Test::StringList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "WStringSequence") == 0) {
      static_cast<T*>(lhs)->WStringSequence = *static_cast<const Test::WStringList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongArray") == 0) {
      Test::ArrayLong* lhsArr = &static_cast<T*>(lhs)->LongArray;
      const Test::ArrayLong* rhsArr = static_cast<const Test::ArrayLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "StringArray") == 0) {
      Test::ArrayString* lhsArr = &static_cast<T*>(lhs)->StringArray;
      const Test::ArrayString* rhsArr = static_cast<const Test::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "WStringArray") == 0) {
      Test::ArrayWString* lhsArr = &static_cast<T*>(lhs)->WStringArray;
      const Test::ArrayWString* rhsArr = static_cast<const Test::ArrayWString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 4; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "StructTest") == 0) {
      static_cast<T*>(lhs)->StructTest = *static_cast<const Test::NestedTestStruct*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "StructSequence") == 0) {
      static_cast<T*>(lhs)->StructSequence = *static_cast<const Test::StructList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "StructArray") == 0) {
      Test::ArrayStruct* lhsArr = &static_cast<T*>(lhs)->StructArray;
      const Test::ArrayStruct* rhsArr = static_cast<const Test::ArrayStruct*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "LongMultiArray") == 0) {
      Test::MultiArrayLong* lhsArr = &static_cast<T*>(lhs)->LongMultiArray;
      const Test::MultiArrayLong* rhsArr = static_cast<const Test::MultiArrayLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "StringMultiArray") == 0) {
      Test::MultiArrayString* lhsArr = &static_cast<T*>(lhs)->StringMultiArray;
      const Test::MultiArrayString* rhsArr = static_cast<const Test::MultiArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "WStringMultiArray") == 0) {
      Test::MultiArrayWString* lhsArr = &static_cast<T*>(lhs)->WStringMultiArray;
      const Test::MultiArrayWString* rhsArr = static_cast<const Test::MultiArrayWString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "StructMultiArray") == 0) {
      Test::MultiArrayStruct* lhsArr = &static_cast<T*>(lhs)->StructMultiArray;
      const Test::MultiArrayStruct* rhsArr = static_cast<const Test::MultiArrayStruct*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "FloatType") == 0) {
      static_cast<T*>(lhs)->FloatType = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "DoubleType") == 0) {
      static_cast<T*>(lhs)->DoubleType = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongDoubleType") == 0) {
      static_cast<T*>(lhs)->LongDoubleType = *static_cast<const CORBA::LongDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "FloatArray") == 0) {
      Test::ArrayFloat* lhsArr = &static_cast<T*>(lhs)->FloatArray;
      const Test::ArrayFloat* rhsArr = static_cast<const Test::ArrayFloat*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "DoubleArray") == 0) {
      Test::ArrayDouble* lhsArr = &static_cast<T*>(lhs)->DoubleArray;
      const Test::ArrayDouble* rhsArr = static_cast<const Test::ArrayDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "LongDoubleArray") == 0) {
      Test::ArrayLongDouble* lhsArr = &static_cast<T*>(lhs)->LongDoubleArray;
      const Test::ArrayLongDouble* rhsArr = static_cast<const Test::ArrayLongDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "FloatSequence") == 0) {
      static_cast<T*>(lhs)->FloatSequence = *static_cast<const Test::FloatList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "DoubleSequence") == 0) {
      static_cast<T*>(lhs)->DoubleSequence = *static_cast<const Test::DoubleList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongDoubleSequence") == 0) {
      static_cast<T*>(lhs)->LongDoubleSequence = *static_cast<const Test::LongDoubleList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "FloatMultiArray") == 0) {
      Test::MultiArrayFloat* lhsArr = &static_cast<T*>(lhs)->FloatMultiArray;
      const Test::MultiArrayFloat* rhsArr = static_cast<const Test::MultiArrayFloat*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "DoubleMultiArray") == 0) {
      Test::MultiArrayDouble* lhsArr = &static_cast<T*>(lhs)->DoubleMultiArray;
      const Test::MultiArrayDouble* rhsArr = static_cast<const Test::MultiArrayDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "LongDoubleMultiArray") == 0) {
      Test::MultiArrayLongDouble* lhsArr = &static_cast<T*>(lhs)->LongDoubleMultiArray;
      const Test::MultiArrayLongDouble* rhsArr = static_cast<const Test::MultiArrayLongDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "CharType") == 0) {
      static_cast<T*>(lhs)->CharType = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "WCharType") == 0) {
      static_cast<T*>(lhs)->WCharType = *static_cast<const CORBA::WChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "CharArray") == 0) {
      Test::ArrayChar* lhsArr = &static_cast<T*>(lhs)->CharArray;
      const Test::ArrayChar* rhsArr = static_cast<const Test::ArrayChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "WCharArray") == 0) {
      Test::ArrayWChar* lhsArr = &static_cast<T*>(lhs)->WCharArray;
      const Test::ArrayWChar* rhsArr = static_cast<const Test::ArrayWChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "CharSequence") == 0) {
      static_cast<T*>(lhs)->CharSequence = *static_cast<const Test::CharList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "WCharSequence") == 0) {
      static_cast<T*>(lhs)->WCharSequence = *static_cast<const Test::WCharList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "CharMultiArray") == 0) {
      Test::MultiArrayChar* lhsArr = &static_cast<T*>(lhs)->CharMultiArray;
      const Test::MultiArrayChar* rhsArr = static_cast<const Test::MultiArrayChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "WCharMultiArray") == 0) {
      Test::MultiArrayWChar* lhsArr = &static_cast<T*>(lhs)->WCharMultiArray;
      const Test::MultiArrayWChar* rhsArr = static_cast<const Test::MultiArrayWChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "ShortType") == 0) {
      static_cast<T*>(lhs)->ShortType = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongLongType") == 0) {
      static_cast<T*>(lhs)->LongLongType = *static_cast<const CORBA::LongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "UnsignedShortType") == 0) {
      static_cast<T*>(lhs)->UnsignedShortType = *static_cast<const CORBA::UShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "UnsignedLongType") == 0) {
      static_cast<T*>(lhs)->UnsignedLongType = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "UnsignedLongLongType") == 0) {
      static_cast<T*>(lhs)->UnsignedLongLongType = *static_cast<const CORBA::ULongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ShortArray") == 0) {
      Test::ArrayShort* lhsArr = &static_cast<T*>(lhs)->ShortArray;
      const Test::ArrayShort* rhsArr = static_cast<const Test::ArrayShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "LongLongArray") == 0) {
      Test::ArrayLongLong* lhsArr = &static_cast<T*>(lhs)->LongLongArray;
      const Test::ArrayLongLong* rhsArr = static_cast<const Test::ArrayLongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "UnsignedShortArray") == 0) {
      Test::ArrayUnsignedShort* lhsArr = &static_cast<T*>(lhs)->UnsignedShortArray;
      const Test::ArrayUnsignedShort* rhsArr = static_cast<const Test::ArrayUnsignedShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "UnsignedLongArray") == 0) {
      Test::ArrayUnsignedLong* lhsArr = &static_cast<T*>(lhs)->UnsignedLongArray;
      const Test::ArrayUnsignedLong* rhsArr = static_cast<const Test::ArrayUnsignedLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "UnsignedLongLongArray") == 0) {
      Test::ArrayUnsignedLongLong* lhsArr = &static_cast<T*>(lhs)->UnsignedLongLongArray;
      const Test::ArrayUnsignedLongLong* rhsArr = static_cast<const Test::ArrayUnsignedLongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "ShortSequence") == 0) {
      static_cast<T*>(lhs)->ShortSequence = *static_cast<const Test::ShortList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongLongSequence") == 0) {
      static_cast<T*>(lhs)->LongLongSequence = *static_cast<const Test::LongLongList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "UnsignedShortSequence") == 0) {
      static_cast<T*>(lhs)->UnsignedShortSequence = *static_cast<const Test::UnsignedShortList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "UnsignedLongSequence") == 0) {
      static_cast<T*>(lhs)->UnsignedLongSequence = *static_cast<const Test::UnsignedLongList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "UnsignedLongLongSequence") == 0) {
      static_cast<T*>(lhs)->UnsignedLongLongSequence = *static_cast<const Test::UnsignedLongLongList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ShortMultiArray") == 0) {
      Test::MultiArrayShort* lhsArr = &static_cast<T*>(lhs)->ShortMultiArray;
      const Test::MultiArrayShort* rhsArr = static_cast<const Test::MultiArrayShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "LongLongMultiArray") == 0) {
      Test::MultiArrayLongLong* lhsArr = &static_cast<T*>(lhs)->LongLongMultiArray;
      const Test::MultiArrayLongLong* rhsArr = static_cast<const Test::MultiArrayLongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "UnsignedShortMultiArray") == 0) {
      Test::MultiArrayUnsignedShort* lhsArr = &static_cast<T*>(lhs)->UnsignedShortMultiArray;
      const Test::MultiArrayUnsignedShort* rhsArr = static_cast<const Test::MultiArrayUnsignedShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "UnsignedLongMultiArray") == 0) {
      Test::MultiArrayUnsignedLong* lhsArr = &static_cast<T*>(lhs)->UnsignedLongMultiArray;
      const Test::MultiArrayUnsignedLong* rhsArr = static_cast<const Test::MultiArrayUnsignedLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "UnsignedLongLongMultiArray") == 0) {
      Test::MultiArrayUnsignedLongLong* lhsArr = &static_cast<T*>(lhs)->UnsignedLongLongMultiArray;
      const Test::MultiArrayUnsignedLongLong* rhsArr = static_cast<const Test::MultiArrayUnsignedLongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "BooleanType") == 0) {
      static_cast<T*>(lhs)->BooleanType = *static_cast<const CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "OctetType") == 0) {
      static_cast<T*>(lhs)->OctetType = *static_cast<const CORBA::Octet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "BooleanArray") == 0) {
      Test::ArrayBoolean* lhsArr = &static_cast<T*>(lhs)->BooleanArray;
      const Test::ArrayBoolean* rhsArr = static_cast<const Test::ArrayBoolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "OctetArray") == 0) {
      Test::ArrayOctet* lhsArr = &static_cast<T*>(lhs)->OctetArray;
      const Test::ArrayOctet* rhsArr = static_cast<const Test::ArrayOctet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "BooleanSequence") == 0) {
      static_cast<T*>(lhs)->BooleanSequence = *static_cast<const Test::BooleanList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "OctetSequence") == 0) {
      static_cast<T*>(lhs)->OctetSequence = *static_cast<const Test::OctetList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "BooleanMultiArray") == 0) {
      Test::MultiArrayBoolean* lhsArr = &static_cast<T*>(lhs)->BooleanMultiArray;
      const Test::MultiArrayBoolean* rhsArr = static_cast<const Test::MultiArrayBoolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "OctetMultiArray") == 0) {
      Test::MultiArrayOctet* lhsArr = &static_cast<T*>(lhs)->OctetMultiArray;
      const Test::MultiArrayOctet* rhsArr = static_cast<const Test::MultiArrayOctet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "TestEnum") == 0) {
      static_cast<T*>(lhs)->TestEnum = *static_cast<const Test::PrimitiveEnum*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "EnumArray") == 0) {
      Test::ArrayEnum* lhsArr = &static_cast<T*>(lhs)->EnumArray;
      const Test::ArrayEnum* rhsArr = static_cast<const Test::ArrayEnum*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 5; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "EnumSequence") == 0) {
      static_cast<T*>(lhs)->EnumSequence = *static_cast<const Test::EnumList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "EnumMultiArray") == 0) {
      Test::MultiArrayEnum* lhsArr = &static_cast<T*>(lhs)->EnumMultiArray;
      const Test::MultiArrayEnum* rhsArr = static_cast<const Test::MultiArrayEnum*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        for (CORBA::ULong i1 = 0; i1 < 4; ++i1) {
          for (CORBA::ULong i2 = 0; i2 < 2; ++i2) {
            (*lhsArr)[i0][i1][i2] = (*rhsArr)[i0][i1][i2];
          }
        }
      }
      return;
    }
    if (std::strcmp(field, "LongBoundedSequence") == 0) {
      static_cast<T*>(lhs)->LongBoundedSequence = *static_cast<const Test::LongBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "StringBoundedSequence") == 0) {
      static_cast<T*>(lhs)->StringBoundedSequence = *static_cast<const Test::StringBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "WStringBoundedSequence") == 0) {
      static_cast<T*>(lhs)->WStringBoundedSequence = *static_cast<const Test::WStringBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "StructBoundedSequence") == 0) {
      static_cast<T*>(lhs)->StructBoundedSequence = *static_cast<const Test::StructBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "LongDoubleBoundedSequence") == 0) {
      static_cast<T*>(lhs)->LongDoubleBoundedSequence = *static_cast<const Test::LongDoubleBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "BooleanBoundedSequence") == 0) {
      static_cast<T*>(lhs)->BooleanBoundedSequence = *static_cast<const Test::BooleanBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "EnumBoundedSequence") == 0) {
      static_cast<T*>(lhs)->EnumBoundedSequence = *static_cast<const Test::EnumBoundedList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::BasicTestStruct)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "Id") == 0) {
      return static_cast<const T*>(lhs)->Id == static_cast<const T*>(rhs)->Id;
    }
    if (std::strcmp(field, "Message") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->Message.in(), static_cast<const T*>(rhs)->Message.in());
    }
    if (std::strcmp(field, "WMessage") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->WMessage.in(), static_cast<const T*>(rhs)->WMessage.in());
    }
    if (std::strcmp(field, "FloatType") == 0) {
      return static_cast<const T*>(lhs)->FloatType == static_cast<const T*>(rhs)->FloatType;
    }
    if (std::strcmp(field, "DoubleType") == 0) {
      return static_cast<const T*>(lhs)->DoubleType == static_cast<const T*>(rhs)->DoubleType;
    }
    if (std::strcmp(field, "LongDoubleType") == 0) {
      return static_cast<const T*>(lhs)->LongDoubleType == static_cast<const T*>(rhs)->LongDoubleType;
    }
    if (std::strcmp(field, "CharType") == 0) {
      return static_cast<const T*>(lhs)->CharType == static_cast<const T*>(rhs)->CharType;
    }
    if (std::strcmp(field, "WCharType") == 0) {
      return static_cast<const T*>(lhs)->WCharType == static_cast<const T*>(rhs)->WCharType;
    }
    if (std::strcmp(field, "ShortType") == 0) {
      return static_cast<const T*>(lhs)->ShortType == static_cast<const T*>(rhs)->ShortType;
    }
    if (std::strcmp(field, "LongLongType") == 0) {
      return static_cast<const T*>(lhs)->LongLongType == static_cast<const T*>(rhs)->LongLongType;
    }
    if (std::strcmp(field, "UnsignedShortType") == 0) {
      return static_cast<const T*>(lhs)->UnsignedShortType == static_cast<const T*>(rhs)->UnsignedShortType;
    }
    if (std::strcmp(field, "UnsignedLongType") == 0) {
      return static_cast<const T*>(lhs)->UnsignedLongType == static_cast<const T*>(rhs)->UnsignedLongType;
    }
    if (std::strcmp(field, "UnsignedLongLongType") == 0) {
      return static_cast<const T*>(lhs)->UnsignedLongLongType == static_cast<const T*>(rhs)->UnsignedLongLongType;
    }
    if (std::strcmp(field, "BooleanType") == 0) {
      return static_cast<const T*>(lhs)->BooleanType == static_cast<const T*>(rhs)->BooleanType;
    }
    if (std::strcmp(field, "OctetType") == 0) {
      return static_cast<const T*>(lhs)->OctetType == static_cast<const T*>(rhs)->OctetType;
    }
    if (std::strcmp(field, "TestEnum") == 0) {
      return static_cast<const T*>(lhs)->TestEnum == static_cast<const T*>(rhs)->TestEnum;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Test::BasicTestStruct)");
  }
};

template<>
const MetaStruct& getMetaStruct<Test::BasicTestStruct>()
{
  static MetaStructImpl<Test::BasicTestStruct> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Test::BasicTestStruct*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Test::BasicTestStruct>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: BasicTestStruct */

/* End MODULE: Test */
