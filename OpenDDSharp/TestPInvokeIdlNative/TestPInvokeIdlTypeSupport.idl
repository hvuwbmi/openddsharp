/* Generated by E:\PROJECTS\OPENDDS\ext\OpenDDS\bin\opendds_idl version 3.13.2 (ACE version 6.2a_p15) running on input file TestPInvokeIdl.idl */
#ifndef OPENDDS_IDL_GENERATED_TESTPINVOKEIDLTYPESUPPORT_IDL_U9K76P
#define OPENDDS_IDL_GENERATED_TESTPINVOKEIDLTYPESUPPORT_IDL_U9K76P
#define __OPENDDS_IDL_HAS_FIXED
#include "TestPInvokeIdl.idl"

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"
#include "dds/DdsDcpsSubscriptionExt.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsTypeSupportExt.idl"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: Current */


/* End INTERFACE: Current */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyType */


/* End TYPEDEF: PolicyType */


/* Begin INTERFACE-FWD: Policy */


/* End INTERFACE-FWD: Policy */


/* Begin TYPEDEF: PolicyList */


/* End TYPEDEF: PolicyList */


/* Begin TYPEDEF: PolicyTypeSeq */


/* End TYPEDEF: PolicyTypeSeq */


/* Begin INTERFACE-FWD: PolicyCurrent */


/* End INTERFACE-FWD: PolicyCurrent */


/* Begin ENUM: SetOverrideType */


/* End ENUM: SetOverrideType */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyErrorCode */


/* End TYPEDEF: PolicyErrorCode */


/* Begin CONST: BAD_POLICY */


/* End CONST: BAD_POLICY */


/* Begin CONST: UNSUPPORTED_POLICY */


/* End CONST: UNSUPPORTED_POLICY */


/* Begin CONST: BAD_POLICY_TYPE */


/* End CONST: BAD_POLICY_TYPE */


/* Begin CONST: BAD_POLICY_VALUE */


/* End CONST: BAD_POLICY_VALUE */


/* Begin CONST: UNSUPPORTED_POLICY_VALUE */


/* End CONST: UNSUPPORTED_POLICY_VALUE */


/* Begin INTERFACE: Policy */


/* End INTERFACE: Policy */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyManager */


/* End INTERFACE: PolicyManager */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyCurrent */


/* End INTERFACE: PolicyCurrent */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ServiceType */


/* End TYPEDEF: ServiceType */


/* Begin TYPEDEF: ServiceOption */


/* End TYPEDEF: ServiceOption */


/* Begin TYPEDEF: ServiceDetailType */


/* End TYPEDEF: ServiceDetailType */


/* Begin TYPEDEF: ServiceDetailData */


/* End TYPEDEF: ServiceDetailData */


/* Begin TYPEDEF: ServiceOptionSeq */


/* End TYPEDEF: ServiceOptionSeq */


/* Begin CONST: Security */


/* End CONST: Security */


/* Begin STRUCT: ServiceDetail */


/* End STRUCT: ServiceDetail */


/* Begin TYPEDEF: ServiceDetailSeq */


/* End TYPEDEF: ServiceDetailSeq */


/* Begin STRUCT: ServiceInformation */


/* End STRUCT: ServiceInformation */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: ParameterMode */


/* End ENUM: ParameterMode */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ORBid */


/* End TYPEDEF: ORBid */


/* Begin TYPEDEF: Flags */


/* End TYPEDEF: Flags */


/* Begin TYPEDEF: Identifier */


/* End TYPEDEF: Identifier */


/* Begin TYPEDEF: RepositoryId */


/* End TYPEDEF: RepositoryId */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: TCKind */


/* End ENUM: TCKind */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin STRUCT: NamedValue */


/* End STRUCT: NamedValue */


/* Begin ENUM: exception_type */


/* End ENUM: exception_type */


/* Begin NATIVE: ValueFactory */


/* End NATIVE: ValueFactory */

/* End MODULE: CORBA */


/* Begin MODULE: Test */



/* Begin ENUM: PrimitiveEnum */


/* End ENUM: PrimitiveEnum */


/* Begin STRUCT: NestedTestStruct */

module Test {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "Test::NestedTestStructSeq"
typedef sequence<Test::NestedTestStruct> NestedTestStructSeq;
#else
native NestedTestStructSeq;
#endif

/** Support topic registration for NestedTestStruct data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface NestedTestStructTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for NestedTestStruct data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface NestedTestStructDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in Test::NestedTestStruct instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in Test::NestedTestStruct instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in Test::NestedTestStruct instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in Test::NestedTestStruct instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in Test::NestedTestStruct instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in Test::NestedTestStruct instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in Test::NestedTestStruct instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in Test::NestedTestStruct instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout Test::NestedTestStruct key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Test::NestedTestStruct instance_data);
};

/** DataReader interface for NestedTestStruct data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface NestedTestStructDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout NestedTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout NestedTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout Test::NestedTestStruct received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout Test::NestedTestStruct received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout NestedTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout NestedTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout NestedTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout Test::NestedTestStruct key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Test::NestedTestStruct instance_data);
};
};

/* End STRUCT: NestedTestStruct */


/* Begin TYPEDEF: LongList */


/* End TYPEDEF: LongList */


/* Begin TYPEDEF: StringList */


/* End TYPEDEF: StringList */


/* Begin TYPEDEF: WStringList */


/* End TYPEDEF: WStringList */


/* Begin TYPEDEF: StructList */


/* End TYPEDEF: StructList */


/* Begin TYPEDEF: ArrayLong */


/* End TYPEDEF: ArrayLong */


/* Begin TYPEDEF: ArrayString */


/* End TYPEDEF: ArrayString */


/* Begin TYPEDEF: ArrayWString */


/* End TYPEDEF: ArrayWString */


/* Begin TYPEDEF: ArrayStruct */


/* End TYPEDEF: ArrayStruct */


/* Begin TYPEDEF: MultiArrayLong */


/* End TYPEDEF: MultiArrayLong */


/* Begin TYPEDEF: MultiArrayString */


/* End TYPEDEF: MultiArrayString */


/* Begin TYPEDEF: MultiArrayWString */


/* End TYPEDEF: MultiArrayWString */


/* Begin TYPEDEF: MultiArrayStruct */


/* End TYPEDEF: MultiArrayStruct */


/* Begin TYPEDEF: ArrayFloat */


/* End TYPEDEF: ArrayFloat */


/* Begin TYPEDEF: ArrayDouble */


/* End TYPEDEF: ArrayDouble */


/* Begin TYPEDEF: ArrayLongDouble */


/* End TYPEDEF: ArrayLongDouble */


/* Begin TYPEDEF: FloatList */


/* End TYPEDEF: FloatList */


/* Begin TYPEDEF: DoubleList */


/* End TYPEDEF: DoubleList */


/* Begin TYPEDEF: LongDoubleList */


/* End TYPEDEF: LongDoubleList */


/* Begin TYPEDEF: MultiArrayFloat */


/* End TYPEDEF: MultiArrayFloat */


/* Begin TYPEDEF: MultiArrayDouble */


/* End TYPEDEF: MultiArrayDouble */


/* Begin TYPEDEF: MultiArrayLongDouble */


/* End TYPEDEF: MultiArrayLongDouble */


/* Begin TYPEDEF: ArrayChar */


/* End TYPEDEF: ArrayChar */


/* Begin TYPEDEF: ArrayWChar */


/* End TYPEDEF: ArrayWChar */


/* Begin TYPEDEF: CharList */


/* End TYPEDEF: CharList */


/* Begin TYPEDEF: WCharList */


/* End TYPEDEF: WCharList */


/* Begin TYPEDEF: MultiArrayChar */


/* End TYPEDEF: MultiArrayChar */


/* Begin TYPEDEF: MultiArrayWChar */


/* End TYPEDEF: MultiArrayWChar */


/* Begin TYPEDEF: ArrayShort */


/* End TYPEDEF: ArrayShort */


/* Begin TYPEDEF: ArrayLongLong */


/* End TYPEDEF: ArrayLongLong */


/* Begin TYPEDEF: ArrayUnsignedShort */


/* End TYPEDEF: ArrayUnsignedShort */


/* Begin TYPEDEF: ArrayUnsignedLong */


/* End TYPEDEF: ArrayUnsignedLong */


/* Begin TYPEDEF: ArrayUnsignedLongLong */


/* End TYPEDEF: ArrayUnsignedLongLong */


/* Begin TYPEDEF: ShortList */


/* End TYPEDEF: ShortList */


/* Begin TYPEDEF: LongLongList */


/* End TYPEDEF: LongLongList */


/* Begin TYPEDEF: UnsignedShortList */


/* End TYPEDEF: UnsignedShortList */


/* Begin TYPEDEF: UnsignedLongList */


/* End TYPEDEF: UnsignedLongList */


/* Begin TYPEDEF: UnsignedLongLongList */


/* End TYPEDEF: UnsignedLongLongList */


/* Begin TYPEDEF: MultiArrayShort */


/* End TYPEDEF: MultiArrayShort */


/* Begin TYPEDEF: MultiArrayLongLong */


/* End TYPEDEF: MultiArrayLongLong */


/* Begin TYPEDEF: MultiArrayUnsignedShort */


/* End TYPEDEF: MultiArrayUnsignedShort */


/* Begin TYPEDEF: MultiArrayUnsignedLong */


/* End TYPEDEF: MultiArrayUnsignedLong */


/* Begin TYPEDEF: MultiArrayUnsignedLongLong */


/* End TYPEDEF: MultiArrayUnsignedLongLong */


/* Begin TYPEDEF: ArrayBoolean */


/* End TYPEDEF: ArrayBoolean */


/* Begin TYPEDEF: ArrayOctet */


/* End TYPEDEF: ArrayOctet */


/* Begin TYPEDEF: BooleanList */


/* End TYPEDEF: BooleanList */


/* Begin TYPEDEF: OctetList */


/* End TYPEDEF: OctetList */


/* Begin TYPEDEF: MultiArrayBoolean */


/* End TYPEDEF: MultiArrayBoolean */


/* Begin TYPEDEF: MultiArrayOctet */


/* End TYPEDEF: MultiArrayOctet */


/* Begin TYPEDEF: ArrayEnum */


/* End TYPEDEF: ArrayEnum */


/* Begin TYPEDEF: EnumList */


/* End TYPEDEF: EnumList */


/* Begin TYPEDEF: MultiArrayEnum */


/* End TYPEDEF: MultiArrayEnum */


/* Begin TYPEDEF: LongBoundedList */


/* End TYPEDEF: LongBoundedList */


/* Begin TYPEDEF: StringBoundedList */


/* End TYPEDEF: StringBoundedList */


/* Begin TYPEDEF: WStringBoundedList */


/* End TYPEDEF: WStringBoundedList */


/* Begin TYPEDEF: StructBoundedList */


/* End TYPEDEF: StructBoundedList */


/* Begin TYPEDEF: LongDoubleBoundedList */


/* End TYPEDEF: LongDoubleBoundedList */


/* Begin TYPEDEF: BooleanBoundedList */


/* End TYPEDEF: BooleanBoundedList */


/* Begin TYPEDEF: EnumBoundedList */


/* End TYPEDEF: EnumBoundedList */


/* Begin STRUCT: BasicTestStruct */

module Test {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "Test::BasicTestStructSeq"
typedef sequence<Test::BasicTestStruct> BasicTestStructSeq;
#else
native BasicTestStructSeq;
#endif

/** Support topic registration for BasicTestStruct data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface BasicTestStructTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for BasicTestStruct data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface BasicTestStructDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in Test::BasicTestStruct instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in Test::BasicTestStruct instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in Test::BasicTestStruct instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in Test::BasicTestStruct instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in Test::BasicTestStruct instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in Test::BasicTestStruct instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in Test::BasicTestStruct instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in Test::BasicTestStruct instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout Test::BasicTestStruct key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Test::BasicTestStruct instance_data);
};

/** DataReader interface for BasicTestStruct data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface BasicTestStructDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout BasicTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout BasicTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout Test::BasicTestStruct received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout Test::BasicTestStruct received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout BasicTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout BasicTestStructSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout BasicTestStructSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout Test::BasicTestStruct key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Test::BasicTestStruct instance_data);
};
};

/* End STRUCT: BasicTestStruct */

/* End MODULE: Test */
#endif /* OPENDDS_IDL_GENERATED_TESTPINVOKEIDLTYPESUPPORT_IDL_U9K76P */
