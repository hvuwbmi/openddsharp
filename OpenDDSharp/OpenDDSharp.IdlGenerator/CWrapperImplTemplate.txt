void <%SCOPED_METHOD%>Wrapper_release(<%SCOPED_METHOD%>Wrapper* obj)
{
    obj->release();
}

<%SCOPED%>TypeSupport_ptr <%SCOPED_METHOD%>TypeSupport_new()
{
    return new <%SCOPED%>TypeSupportImpl();
}

char* <%SCOPED_METHOD%>TypeSupport_GetTypeName(<%SCOPED%>TypeSupport_ptr native)
{
    return native->get_type_name();
}

int <%SCOPED_METHOD%>TypeSupport_RegisterType(<%SCOPED%>TypeSupport_ptr native, ::DDS::DomainParticipant_ptr dp, const char* typeName)
{
    return native->register_type(dp, typeName);
}

int <%SCOPED_METHOD%>TypeSupport_UnregisterType(<%SCOPED%>TypeSupport_ptr native, ::DDS::DomainParticipant_ptr dp, const char* typeName)
{
    return native->unregister_type(dp, typeName);
}

<%SCOPED%>DataWriter_ptr <%SCOPED_METHOD%>DataWriter_Narrow(DDS::DataWriter_ptr dw)
{
    return <%SCOPED%>DataWriter::_narrow(dw);
}

int <%SCOPED_METHOD%>DataWriter_Write(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper data, int handle)
{
    <%SCOPED%> nativeData = data.to_native();

    return dw->write(nativeData, handle);
}

int <%SCOPED_METHOD%>DataWriter_WriteWithTimestamp(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper data, int handle, ::DDS::Time_t time) {
    <%SCOPED%> nativeData = data.to_native();

    return dw->write_w_timestamp(nativeData, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_RegisterInstance(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper instance) {
    <%SCOPED%> nativeData = instance.to_native();

    return dw->register_instance(nativeData);
}

<%SCOPED%>DataReader_ptr <%SCOPED_METHOD%>DataReader_Narrow(DDS::DataReader_ptr dr)
{
    return <%SCOPED%>DataReader::_narrow(dr);
}

int <%SCOPED_METHOD%>DataReader_ReadNextSample(<%SCOPED%>DataReader_ptr dr, <%SCOPED_METHOD%>Wrapper* data)
{
    <%SCOPED%> nativeData;
    ::DDS::SampleInfo sampleInfo;
    ::DDS::ReturnCode_t ret = dr->read_next_sample(nativeData, sampleInfo);
    if (ret == ::DDS::RETCODE_OK)
    {
        data->from_native(nativeData);
    }

    return (int)ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_Read(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_Take(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}
