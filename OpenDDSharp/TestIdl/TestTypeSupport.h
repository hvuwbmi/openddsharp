//------------------------------------------------------------------------------
// <auto-generated>
// WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
// DDS version: 3.13.2
// ACE version: 6.2a_p15
// Running on input file: Test.idl
// </auto-generated>
//------------------------------------------------------------------------------

#pragma once

#pragma unmanaged
#include <dds/DCPS/Service_Participant.h>
#include "TestTypeSupportImpl.h"
#pragma managed

#include <vcclr.h>
#include <msclr/marshal.h>
#include "LNK4248.h"

using namespace System::Collections::Generic;

// Incomplete types generate LNK4248 warnings when compiled for .NET
SUPPRESS_LNK4248_CORBA

namespace OpenDDSharp {
namespace Test {

    public enum class PrimitiveEnum {
        ENUM1 = ::Test::ENUM1,
        ENUM2 = ::Test::ENUM2,
        ENUM3 = ::Test::ENUM3
    };

    public enum class SupportTestKind {
        InconsistentTopicTest = ::Test::InconsistentTopicTest,
        PublicationDisconnectedTest = ::Test::PublicationDisconnectedTest,
        PublicationLostTest = ::Test::PublicationLostTest,
        PublicationReconnectedTest = ::Test::PublicationReconnectedTest,
        SubscriptionDisconnectedTest = ::Test::SubscriptionDisconnectedTest,
        SubscriptionLostTest = ::Test::SubscriptionLostTest,
        SubscriptionReconnectedTest = ::Test::SubscriptionReconnectedTest
    };

    public ref class BasicTestStruct {

    private:
        System::Int32 m_Id;

    public:
        property System::Int32 Id {
            System::Int32 get();
            void set(System::Int32 value);
        }

    public:
        BasicTestStruct();

    internal:
        ::Test::BasicTestStruct ToNative();
        void FromNative(::Test::BasicTestStruct native);
    };

    public ref class BasicTestStructTypeSupport {

	private:
		msclr::interop::marshal_context context;
        static ::Test::BasicTestStructTypeSupport_ptr impl_entity;

	public:
		BasicTestStructTypeSupport();
		System::String^ GetTypeName();
		OpenDDSharp::DDS::ReturnCode RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);
        OpenDDSharp::DDS::ReturnCode UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);

	};

///////////////////////////////////////////////////////////////////////

	public ref class BasicTestStructDataWriter : OpenDDSharp::DDS::DataWriter {

	private:
		::Test::BasicTestStructDataWriter_ptr impl_entity;

	public:
		BasicTestStructDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(BasicTestStruct^ instance);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(BasicTestStruct^ instance, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(BasicTestStruct^ data);
		OpenDDSharp::DDS::ReturnCode UnregisterInstance(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(BasicTestStruct^ data,OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Write(BasicTestStruct^ data);
        OpenDDSharp::DDS::ReturnCode Write(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Write(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Dispose(BasicTestStruct^ data);
		OpenDDSharp::DDS::ReturnCode Dispose(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Dispose(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode GetKeyValue(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        System::Int32 LookupInstance(BasicTestStruct^ instance);
	};

///////////////////////////////////////////////////////////////////////

	public ref class BasicTestStructDataReader : OpenDDSharp::DDS::DataReader {

	private:
		::Test::BasicTestStructDataReader_ptr impl_entity;

	public:
		BasicTestStructDataReader(::OpenDDSharp::DDS::DataReader^ dataReader);

        OpenDDSharp::DDS::ReturnCode Read(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Read(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Read(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode Read(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode Take(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Take(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Take(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);        

        OpenDDSharp::DDS::ReturnCode Take(List<BasicTestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);
        
        OpenDDSharp::DDS::ReturnCode ReadInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,												  
												  OpenDDSharp::DDS::InstanceHandle handle,
                                                  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<BasicTestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

         OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<BasicTestStruct^>^ receivedData,
												       List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												       OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<BasicTestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

		OpenDDSharp::DDS::ReturnCode ReadNextSample(BasicTestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

		OpenDDSharp::DDS::ReturnCode TakeNextSample(BasicTestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

        OpenDDSharp::DDS::ReturnCode GetKeyValue(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);

        OpenDDSharp::DDS::InstanceHandle LookupInstance(BasicTestStruct^ instance);
	};

///////////////////////////////////////////////////////////////////////

    typedef List<System::Int32> LongList;

    typedef List<System::String^> StringList;

    typedef List<OpenDDSharp::Test::BasicTestStruct^> StructList;

    typedef List<long double> LongDoubleList;

    typedef array<System::Int32, 2> ArrayLong;

    typedef array<System::String^, 2> ArrayString;

    typedef array<OpenDDSharp::Test::BasicTestStruct^, 2> ArrayStruct;

    typedef array<long double, 2> ArrayLongDouble;

    typedef System::Int32 TestPrimitiveTypedef;
    public ref class TEST_CONST sealed {
    public:
        static const System::Int32 VALUE = 1;
    private:
        TEST_CONST() {}
    };
    public ref class TEST_STRING_CONST sealed {
    public:
        static const System::String^ VALUE = "Hello, I love you, won't you tell me your name?";
    private:
        TEST_STRING_CONST() {}
    };

    public ref class TestStruct {

    private:
        System::Int32 m_Id;
        System::String^ m_RawData;
        System::Int64 m_TimeTicks;
        System::Char m_CharType;
        System::Char m_WcharType;
        System::Byte m_OctetType;
        System::Int16 m_ShortType;
        System::UInt16 m_UnsignedShortType;
        System::UInt32 m_UnsignedLongType;
        System::UInt64 m_UnsignedLongLongType;
        System::Single m_FloatType;
        System::Double m_DoubleType;
        long double m_LongDoubleType;
        System::Boolean m_BooleanType;
        System::String^ m_WstringType;
        OpenDDSharp::Test::LongList^ m_LongSequence;
        OpenDDSharp::Test::StringList^ m_StringSequence;
        OpenDDSharp::Test::StructList^ m_StructSequence;
        OpenDDSharp::Test::LongDoubleList^ m_LongDoubleSequence;
        OpenDDSharp::Test::ArrayLong^ m_LongArray;
        OpenDDSharp::Test::ArrayString^ m_StringArray;
        OpenDDSharp::Test::ArrayStruct^ m_StructArray;
        OpenDDSharp::Test::ArrayLongDouble^ m_LongDoubleArray;
        OpenDDSharp::Test::BasicTestStruct^ m_StructTest;
        OpenDDSharp::Test::PrimitiveEnum m_TestEnum;

    public:
        property System::Int32 Id {
            System::Int32 get();
            void set(System::Int32 value);
        }
        property System::String^ RawData {
            System::String^ get();
            void set(System::String^ value);
        }
        property System::Int64 TimeTicks {
            System::Int64 get();
            void set(System::Int64 value);
        }
        property System::Char CharType {
            System::Char get();
            void set(System::Char value);
        }
        property System::Char WcharType {
            System::Char get();
            void set(System::Char value);
        }
        property System::Byte OctetType {
            System::Byte get();
            void set(System::Byte value);
        }
        property System::Int16 ShortType {
            System::Int16 get();
            void set(System::Int16 value);
        }
        property System::UInt16 UnsignedShortType {
            System::UInt16 get();
            void set(System::UInt16 value);
        }
        property System::UInt32 UnsignedLongType {
            System::UInt32 get();
            void set(System::UInt32 value);
        }
        property System::UInt64 UnsignedLongLongType {
            System::UInt64 get();
            void set(System::UInt64 value);
        }
        property System::Single FloatType {
            System::Single get();
            void set(System::Single value);
        }
        property System::Double DoubleType {
            System::Double get();
            void set(System::Double value);
        }
        property long double LongDoubleType {
            long double get();
            void set(long double value);
        }
        property System::Boolean BooleanType {
            System::Boolean get();
            void set(System::Boolean value);
        }
        property System::String^ WstringType {
            System::String^ get();
            void set(System::String^ value);
        }
        property OpenDDSharp::Test::LongList^ LongSequence {
            OpenDDSharp::Test::LongList^ get();
            void set(OpenDDSharp::Test::LongList^ value);
        }
        property OpenDDSharp::Test::StringList^ StringSequence {
            OpenDDSharp::Test::StringList^ get();
            void set(OpenDDSharp::Test::StringList^ value);
        }
        property OpenDDSharp::Test::StructList^ StructSequence {
            OpenDDSharp::Test::StructList^ get();
            void set(OpenDDSharp::Test::StructList^ value);
        }
        property OpenDDSharp::Test::LongDoubleList^ LongDoubleSequence {
            OpenDDSharp::Test::LongDoubleList^ get();
            void set(OpenDDSharp::Test::LongDoubleList^ value);
        }
        property OpenDDSharp::Test::ArrayLong^ LongArray {
            OpenDDSharp::Test::ArrayLong^ get();
            void set(OpenDDSharp::Test::ArrayLong^ value);
        }
        property OpenDDSharp::Test::ArrayString^ StringArray {
            OpenDDSharp::Test::ArrayString^ get();
            void set(OpenDDSharp::Test::ArrayString^ value);
        }
        property OpenDDSharp::Test::ArrayStruct^ StructArray {
            OpenDDSharp::Test::ArrayStruct^ get();
            void set(OpenDDSharp::Test::ArrayStruct^ value);
        }
        property OpenDDSharp::Test::ArrayLongDouble^ LongDoubleArray {
            OpenDDSharp::Test::ArrayLongDouble^ get();
            void set(OpenDDSharp::Test::ArrayLongDouble^ value);
        }
        property OpenDDSharp::Test::BasicTestStruct^ StructTest {
            OpenDDSharp::Test::BasicTestStruct^ get();
            void set(OpenDDSharp::Test::BasicTestStruct^ value);
        }
        property OpenDDSharp::Test::PrimitiveEnum TestEnum {
            OpenDDSharp::Test::PrimitiveEnum get();
            void set(OpenDDSharp::Test::PrimitiveEnum value);
        }

    public:
        TestStruct();

    internal:
        ::Test::TestStruct ToNative();
        void FromNative(::Test::TestStruct native);
    };

    public ref class TestStructTypeSupport {

	private:
		msclr::interop::marshal_context context;
        static ::Test::TestStructTypeSupport_ptr impl_entity;

	public:
		TestStructTypeSupport();
		System::String^ GetTypeName();
		OpenDDSharp::DDS::ReturnCode RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);
        OpenDDSharp::DDS::ReturnCode UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);

	};

///////////////////////////////////////////////////////////////////////

	public ref class TestStructDataWriter : OpenDDSharp::DDS::DataWriter {

	private:
		::Test::TestStructDataWriter_ptr impl_entity;

	public:
		TestStructDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(TestStruct^ instance);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(TestStruct^ instance, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(TestStruct^ data);
		OpenDDSharp::DDS::ReturnCode UnregisterInstance(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(TestStruct^ data,OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Write(TestStruct^ data);
        OpenDDSharp::DDS::ReturnCode Write(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Write(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Dispose(TestStruct^ data);
		OpenDDSharp::DDS::ReturnCode Dispose(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Dispose(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode GetKeyValue(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);
        System::Int32 LookupInstance(TestStruct^ instance);
	};

///////////////////////////////////////////////////////////////////////

	public ref class TestStructDataReader : OpenDDSharp::DDS::DataReader {

	private:
		::Test::TestStructDataReader_ptr impl_entity;

	public:
		TestStructDataReader(::OpenDDSharp::DDS::DataReader^ dataReader);

        OpenDDSharp::DDS::ReturnCode Read(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Read(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Read(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode Read(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode Take(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Take(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Take(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);        

        OpenDDSharp::DDS::ReturnCode Take(List<TestStruct^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);
        
        OpenDDSharp::DDS::ReturnCode ReadInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,												  
												  OpenDDSharp::DDS::InstanceHandle handle,
                                                  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<TestStruct^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

         OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<TestStruct^>^ receivedData,
												       List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												       OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<TestStruct^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

		OpenDDSharp::DDS::ReturnCode ReadNextSample(TestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

		OpenDDSharp::DDS::ReturnCode TakeNextSample(TestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

        OpenDDSharp::DDS::ReturnCode GetKeyValue(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle);

        OpenDDSharp::DDS::InstanceHandle LookupInstance(TestStruct^ instance);
	};

///////////////////////////////////////////////////////////////////////

    public ref class Athlete {

    private:
        System::Int32 m_AthleteId;
        System::String^ m_FirstName;
        System::String^ m_SecondName;
        System::String^ m_Country;

    public:
        property System::Int32 AthleteId {
            System::Int32 get();
            void set(System::Int32 value);
        }
        property System::String^ FirstName {
            System::String^ get();
            void set(System::String^ value);
        }
        property System::String^ SecondName {
            System::String^ get();
            void set(System::String^ value);
        }
        property System::String^ Country {
            System::String^ get();
            void set(System::String^ value);
        }

    public:
        Athlete();

    internal:
        ::Test::Athlete ToNative();
        void FromNative(::Test::Athlete native);
    };

    public ref class AthleteTypeSupport {

	private:
		msclr::interop::marshal_context context;
        static ::Test::AthleteTypeSupport_ptr impl_entity;

	public:
		AthleteTypeSupport();
		System::String^ GetTypeName();
		OpenDDSharp::DDS::ReturnCode RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);
        OpenDDSharp::DDS::ReturnCode UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);

	};

///////////////////////////////////////////////////////////////////////

	public ref class AthleteDataWriter : OpenDDSharp::DDS::DataWriter {

	private:
		::Test::AthleteDataWriter_ptr impl_entity;

	public:
		AthleteDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(Athlete^ instance);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(Athlete^ instance, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(Athlete^ data);
		OpenDDSharp::DDS::ReturnCode UnregisterInstance(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(Athlete^ data,OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Write(Athlete^ data);
        OpenDDSharp::DDS::ReturnCode Write(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Write(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Dispose(Athlete^ data);
		OpenDDSharp::DDS::ReturnCode Dispose(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Dispose(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode GetKeyValue(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle);
        System::Int32 LookupInstance(Athlete^ instance);
	};

///////////////////////////////////////////////////////////////////////

	public ref class AthleteDataReader : OpenDDSharp::DDS::DataReader {

	private:
		::Test::AthleteDataReader_ptr impl_entity;

	public:
		AthleteDataReader(::OpenDDSharp::DDS::DataReader^ dataReader);

        OpenDDSharp::DDS::ReturnCode Read(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Read(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Read(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode Read(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode Take(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Take(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Take(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);        

        OpenDDSharp::DDS::ReturnCode Take(List<Athlete^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);
        
        OpenDDSharp::DDS::ReturnCode ReadInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,												  
												  OpenDDSharp::DDS::InstanceHandle handle,
                                                  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<Athlete^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

         OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Athlete^>^ receivedData,
												       List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												       OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Athlete^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

		OpenDDSharp::DDS::ReturnCode ReadNextSample(Athlete^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

		OpenDDSharp::DDS::ReturnCode TakeNextSample(Athlete^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

        OpenDDSharp::DDS::ReturnCode GetKeyValue(Athlete^ data, OpenDDSharp::DDS::InstanceHandle handle);

        OpenDDSharp::DDS::InstanceHandle LookupInstance(Athlete^ instance);
	};

///////////////////////////////////////////////////////////////////////

    public ref class Result {

    private:
        System::Int32 m_AthleteId;
        System::Int32 m_Rank;
        System::Single m_Score;

    public:
        property System::Int32 AthleteId {
            System::Int32 get();
            void set(System::Int32 value);
        }
        property System::Int32 Rank {
            System::Int32 get();
            void set(System::Int32 value);
        }
        property System::Single Score {
            System::Single get();
            void set(System::Single value);
        }

    public:
        Result();

    internal:
        ::Test::Result ToNative();
        void FromNative(::Test::Result native);
    };

    public ref class ResultTypeSupport {

	private:
		msclr::interop::marshal_context context;
        static ::Test::ResultTypeSupport_ptr impl_entity;

	public:
		ResultTypeSupport();
		System::String^ GetTypeName();
		OpenDDSharp::DDS::ReturnCode RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);
        OpenDDSharp::DDS::ReturnCode UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);

	};

///////////////////////////////////////////////////////////////////////

	public ref class ResultDataWriter : OpenDDSharp::DDS::DataWriter {

	private:
		::Test::ResultDataWriter_ptr impl_entity;

	public:
		ResultDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(Result^ instance);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(Result^ instance, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(Result^ data);
		OpenDDSharp::DDS::ReturnCode UnregisterInstance(Result^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(Result^ data,OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Write(Result^ data);
        OpenDDSharp::DDS::ReturnCode Write(Result^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Write(Result^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Dispose(Result^ data);
		OpenDDSharp::DDS::ReturnCode Dispose(Result^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Dispose(Result^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode GetKeyValue(Result^ data, OpenDDSharp::DDS::InstanceHandle handle);
        System::Int32 LookupInstance(Result^ instance);
	};

///////////////////////////////////////////////////////////////////////

	public ref class ResultDataReader : OpenDDSharp::DDS::DataReader {

	private:
		::Test::ResultDataReader_ptr impl_entity;

	public:
		ResultDataReader(::OpenDDSharp::DDS::DataReader^ dataReader);

        OpenDDSharp::DDS::ReturnCode Read(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Read(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Read(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode Read(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode Take(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Take(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Take(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);        

        OpenDDSharp::DDS::ReturnCode Take(List<Result^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);
        
        OpenDDSharp::DDS::ReturnCode ReadInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,												  
												  OpenDDSharp::DDS::InstanceHandle handle,
                                                  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<Result^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

         OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Result^>^ receivedData,
												       List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												       OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<Result^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

		OpenDDSharp::DDS::ReturnCode ReadNextSample(Result^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

		OpenDDSharp::DDS::ReturnCode TakeNextSample(Result^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

        OpenDDSharp::DDS::ReturnCode GetKeyValue(Result^ data, OpenDDSharp::DDS::InstanceHandle handle);

        OpenDDSharp::DDS::InstanceHandle LookupInstance(Result^ instance);
	};

///////////////////////////////////////////////////////////////////////

    public ref class AthleteResult {

    private:
        System::Int32 m_AthleteId;
        System::String^ m_FirstName;
        System::String^ m_SecondName;
        System::String^ m_Country;
        System::Int32 m_Rank;
        System::Single m_Score;

    public:
        property System::Int32 AthleteId {
            System::Int32 get();
            void set(System::Int32 value);
        }
        property System::String^ FirstName {
            System::String^ get();
            void set(System::String^ value);
        }
        property System::String^ SecondName {
            System::String^ get();
            void set(System::String^ value);
        }
        property System::String^ Country {
            System::String^ get();
            void set(System::String^ value);
        }
        property System::Int32 Rank {
            System::Int32 get();
            void set(System::Int32 value);
        }
        property System::Single Score {
            System::Single get();
            void set(System::Single value);
        }

    public:
        AthleteResult();

    internal:
        ::Test::AthleteResult ToNative();
        void FromNative(::Test::AthleteResult native);
    };

    public ref class AthleteResultTypeSupport {

	private:
		msclr::interop::marshal_context context;
        static ::Test::AthleteResultTypeSupport_ptr impl_entity;

	public:
		AthleteResultTypeSupport();
		System::String^ GetTypeName();
		OpenDDSharp::DDS::ReturnCode RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);
        OpenDDSharp::DDS::ReturnCode UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName);

	};

///////////////////////////////////////////////////////////////////////

	public ref class AthleteResultDataWriter : OpenDDSharp::DDS::DataWriter {

	private:
		::Test::AthleteResultDataWriter_ptr impl_entity;

	public:
		AthleteResultDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(AthleteResult^ instance);
        OpenDDSharp::DDS::InstanceHandle RegisterInstance(AthleteResult^ instance, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(AthleteResult^ data);
		OpenDDSharp::DDS::ReturnCode UnregisterInstance(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode UnregisterInstance(AthleteResult^ data,OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Write(AthleteResult^ data);
        OpenDDSharp::DDS::ReturnCode Write(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Write(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
		OpenDDSharp::DDS::ReturnCode Dispose(AthleteResult^ data);
		OpenDDSharp::DDS::ReturnCode Dispose(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle);
        OpenDDSharp::DDS::ReturnCode Dispose(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp);
        OpenDDSharp::DDS::ReturnCode GetKeyValue(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle);
        System::Int32 LookupInstance(AthleteResult^ instance);
	};

///////////////////////////////////////////////////////////////////////

	public ref class AthleteResultDataReader : OpenDDSharp::DDS::DataReader {

	private:
		::Test::AthleteResultDataReader_ptr impl_entity;

	public:
		AthleteResultDataReader(::OpenDDSharp::DDS::DataReader^ dataReader);

        OpenDDSharp::DDS::ReturnCode Read(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Read(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Read(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode Read(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode Take(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo);

		OpenDDSharp::DDS::ReturnCode Take(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples);

        OpenDDSharp::DDS::ReturnCode Take(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::ReadCondition^ condition);        

        OpenDDSharp::DDS::ReturnCode Take(List<AthleteResult^>^ receivedData,
										  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
										  System::Int32 maxSamples,
										  OpenDDSharp::DDS::SampleStateMask sampleStates,
										  OpenDDSharp::DDS::ViewStateMask viewStates,
										  OpenDDSharp::DDS::InstanceStateMask instanceStates);
        
        OpenDDSharp::DDS::ReturnCode ReadInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,												  
												  OpenDDSharp::DDS::InstanceHandle handle,
                                                  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeInstance(List<AthleteResult^>^ receivedData,
												  List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												  OpenDDSharp::DDS::InstanceHandle handle,
												  System::Int32 maxSamples,
												  OpenDDSharp::DDS::SampleStateMask sampleStates,
												  OpenDDSharp::DDS::ViewStateMask viewStates,
												  OpenDDSharp::DDS::InstanceStateMask instanceStates);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode ReadNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

         OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<AthleteResult^>^ receivedData,
												       List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												       OpenDDSharp::DDS::InstanceHandle previousHandle);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples);

		OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::ReadCondition^ condition);

        OpenDDSharp::DDS::ReturnCode TakeNextInstance(List<AthleteResult^>^ receivedData,
												      List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo,
												      OpenDDSharp::DDS::InstanceHandle previousHandle,
												      System::Int32 maxSamples,
												      OpenDDSharp::DDS::SampleStateMask sampleStates,
												      OpenDDSharp::DDS::ViewStateMask viewStates,
												      OpenDDSharp::DDS::InstanceStateMask instanceStates);

		OpenDDSharp::DDS::ReturnCode ReadNextSample(AthleteResult^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

		OpenDDSharp::DDS::ReturnCode TakeNextSample(AthleteResult^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo);

        OpenDDSharp::DDS::ReturnCode GetKeyValue(AthleteResult^ data, OpenDDSharp::DDS::InstanceHandle handle);

        OpenDDSharp::DDS::InstanceHandle LookupInstance(AthleteResult^ instance);
	};

///////////////////////////////////////////////////////////////////////
};
};
