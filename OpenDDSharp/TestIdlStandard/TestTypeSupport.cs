//------------------------------------------------------------------------------
// <auto-generated>
// WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
// DDS version: 3.13.2
// ACE version: 6.2a_p15
// Running on input file: IDL\Test.idl
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Security;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using OpenDDSharp.DDS;

namespace Test
{
    #region TestStruct Definitions
    public class TestStruct
    {
        #region Constants
#if DEBUG
        internal const string API_DLL_X86 = "TestIdlStandardWrapperd_Win32";
        internal const string API_DLL_X64 = "TestIdlStandardWrapperd_x64";
#else
        internal const string API_DLL_X86 = "TestIdlStandardWrapper_Win32";
        internal const string API_DLL_X64 = "TestIdlStandardWrapper_x64";
#endif
        #endregion

        #region Fields
        Int16 _ShortField;
        UInt16 _UnsignedShortField;
        Int32 _LongField;
        UInt32 _UnsignedLongField;
        Int64 _LongLongField;
        UInt64 _UnsignedLongLongField;
        Char _CharField;
        Char _WCharField;
        Boolean _BooleanField;
        Byte _OctetField;
        Single _FloatField;
        Double _DoubleField;
        Decimal _LongDoubleField;
        string _UnboundedStringField;
        string _UnboundedWStringField;
        #endregion

        #region Properties
        public Int16 ShortField
        {
            get { return _ShortField; }
            set { _ShortField = value; }
        }

        public UInt16 UnsignedShortField
        {
            get { return _UnsignedShortField; }
            set { _UnsignedShortField = value; }
        }

        public Int32 LongField
        {
            get { return _LongField; }
            set { _LongField = value; }
        }

        public UInt32 UnsignedLongField
        {
            get { return _UnsignedLongField; }
            set { _UnsignedLongField = value; }
        }

        public Int64 LongLongField
        {
            get { return _LongLongField; }
            set { _LongLongField = value; }
        }

        public UInt64 UnsignedLongLongField
        {
            get { return _UnsignedLongLongField; }
            set { _UnsignedLongLongField = value; }
        }

        public Char CharField
        {
            get { return _CharField; }
            set { _CharField = value; }
        }

        public Char WCharField
        {
            get { return _WCharField; }
            set { _WCharField = value; }
        }

        public Boolean BooleanField
        {
            get { return _BooleanField; }
            set { _BooleanField = value; }
        }

        public Byte OctetField
        {
            get { return _OctetField; }
            set { _OctetField = value; }
        }

        public Single FloatField
        {
            get { return _FloatField; }
            set { _FloatField = value; }
        }

        public Double DoubleField
        {
            get { return _DoubleField; }
            set { _DoubleField = value; }
        }

        public Decimal LongDoubleField
        {
            get { return _LongDoubleField; }
            set { _LongDoubleField = value; }
        }

        public string UnboundedStringField
        {
            get { return _UnboundedStringField; }
            set { _UnboundedStringField = value; }
        }

        public string UnboundedWStringField
        {
            get { return _UnboundedWStringField; }
            set { _UnboundedWStringField = value; }
        }
        #endregion 

        #region Constructors
        public TestStruct()
        {
            _ShortField = 0;
            _UnsignedShortField = 0;
            _LongField = 0;
            _UnsignedLongField = 0;
            _LongLongField = 0;
            _UnsignedLongLongField = 0;
            _CharField = '\0';
            _WCharField = '\0';
            _BooleanField = false;
            _OctetField = 0;
            _FloatField = 0;
            _DoubleField = 0;
            _LongDoubleField = 0;
            _UnboundedStringField = string.Empty;;
            _UnboundedWStringField = string.Empty;;
        }
        #endregion

        #region Methods
        internal TestStructWrapper ToNative(List<IntPtr> toRelease)
        {
            TestStructWrapper wrapper = new TestStructWrapper();

            wrapper.ShortField = _ShortField;
            wrapper.UnsignedShortField = _UnsignedShortField;
            wrapper.LongField = _LongField;
            wrapper.UnsignedLongField = _UnsignedLongField;
            wrapper.LongLongField = _LongLongField;
            wrapper.UnsignedLongLongField = _UnsignedLongLongField;
            wrapper.CharField = _CharField;
            wrapper.WCharField = _WCharField;
            wrapper.BooleanField = _BooleanField;
            wrapper.OctetField = _OctetField;
            wrapper.FloatField = _FloatField;
            wrapper.DoubleField = _DoubleField;
            wrapper.LongDoubleField = Convert.ToDouble(_LongDoubleField);
            if (UnboundedStringField != null)
            {
                wrapper.UnboundedStringField = Marshal.StringToHGlobalAnsi(UnboundedStringField);
                toRelease.Add(wrapper.UnboundedStringField);
            }
            if (UnboundedWStringField != null)
            {
                wrapper.UnboundedWStringField = Marshal.StringToHGlobalUni(UnboundedWStringField);
                toRelease.Add(wrapper.UnboundedWStringField);
            }

            return wrapper;
        }

        internal void FromNative(TestStructWrapper wrapper)
        {
            _ShortField = wrapper.ShortField;
            _UnsignedShortField = wrapper.UnsignedShortField;
            _LongField = wrapper.LongField;
            _UnsignedLongField = wrapper.UnsignedLongField;
            _LongLongField = wrapper.LongLongField;
            _UnsignedLongLongField = wrapper.UnsignedLongLongField;
            _CharField = wrapper.CharField;
            _WCharField = wrapper.WCharField;
            _BooleanField = wrapper.BooleanField;
            _OctetField = wrapper.OctetField;
            _FloatField = wrapper.FloatField;
            _DoubleField = wrapper.DoubleField;
            _LongDoubleField = Convert.ToDecimal(wrapper.LongDoubleField);
            if (wrapper.UnboundedStringField != IntPtr.Zero)
            {
                UnboundedStringField= Marshal.PtrToStringAnsi(wrapper.UnboundedStringField);
            }
            else
            {
                UnboundedStringField = null;
            }
            if (wrapper.UnboundedWStringField != IntPtr.Zero)
            {
                UnboundedWStringField= Marshal.PtrToStringUni(wrapper.UnboundedWStringField);
            }
            else
            {
                UnboundedWStringField = null;
            }
        }
        #endregion
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct TestStructWrapper
    {
        public Int16 ShortField;
        public UInt16 UnsignedShortField;
        public Int32 LongField;
        public UInt32 UnsignedLongField;
        public Int64 LongLongField;
        public UInt64 UnsignedLongLongField;
        [MarshalAs(UnmanagedType.I1)]
        public Char CharField;
        [MarshalAs(UnmanagedType.I2)]
        public Char WCharField;
        [MarshalAs(UnmanagedType.I1)]
        public Boolean BooleanField;
        [MarshalAs(UnmanagedType.U1)]
        public Byte OctetField;
        public Single FloatField;
        public Double DoubleField;
        public Double LongDoubleField;
        public IntPtr UnboundedStringField;
        public IntPtr UnboundedWStringField;
    }

	public class TestStructTypeSupport
    {
        #region Field
        private IntPtr _native;
        #endregion

        #region Constructors
        public TestStructTypeSupport()
        {
            if (Environment.Is64BitProcess)
            {
                _native = TestStructTypeSupportNew64();
            }
            else
            {
                _native = TestStructTypeSupportNew86();
            }
        }
        #endregion

        #region Methods
        public string GetTypeName()
        {
            if (Environment.Is64BitProcess)
            {
                return Marshal.PtrToStringAnsi(GetTypeName64(_native));                
            }
            else
            {
                return Marshal.PtrToStringAnsi(GetTypeName86(_native));                              
            }
        }

        public ReturnCode RegisterType(DomainParticipant dp, string typeName)
        {
            if (Environment.Is64BitProcess)
            {
                return (ReturnCode)RegisterType64(_native, dp.ToNative(), typeName);
            }
            else
            {
                return (ReturnCode)RegisterType86(_native, dp.ToNative(), typeName);
            }
        }

        public ReturnCode UnregisterType(DomainParticipant dp, string typeName)
        {            
            if (Environment.Is64BitProcess)
            {
                return (ReturnCode)UnregisterType64(_native, dp.ToNative(), typeName);
            }
            else
            {
                return (ReturnCode)UnregisterType86(_native, dp.ToNative(), typeName);
            }
        }
        #endregion

        #region PInvoke
        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructTypeSupport_new", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr TestStructTypeSupportNew64();

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructTypeSupport_new", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr TestStructTypeSupportNew86();

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructTypeSupport_GetTypeName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern IntPtr GetTypeName64(IntPtr native);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructTypeSupport_GetTypeName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern IntPtr GetTypeName86(IntPtr native);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructTypeSupport_RegisterType", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int RegisterType64(IntPtr native, IntPtr dp, string typeName);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructTypeSupport_RegisterType", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int RegisterType86(IntPtr native, IntPtr dp, string typeName);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructTypeSupport_UnregisterType", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int UnregisterType64(IntPtr native, IntPtr dp, string typeName);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructTypeSupport_UnregisterType", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int UnregisterType86(IntPtr native, IntPtr dp, string typeName);
        #endregion
    }

    public class TestStructDataWriter : DataWriter
    {
        #region Fields
        private new readonly IntPtr _native;
        #endregion

        #region Constructors
        public TestStructDataWriter(DataWriter dw) : base(dw.ToNative())
        {
            if (Environment.Is64BitProcess)
            {
                _native = Narrow64(base._native);
            }
            else
            {
                _native = Narrow86(base._native);
            }
        }
        #endregion

        #region Methods
        public ReturnCode Write(TestStruct data)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            List<IntPtr> toRelease = new List<IntPtr>();

            TestStructWrapper wrapper = data.ToNative(toRelease);
            if (Environment.Is64BitProcess)
            {                                
                ret = (ReturnCode)Write64(_native, ref wrapper, 0);
            }
            else
            {
                ret = (ReturnCode)Write86(_native, ref wrapper, 0);
            }

            // Always free the unmanaged memory.
            foreach(IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }
        #endregion

        #region PInvoke
        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructDataWriter_Narrow", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Narrow64(IntPtr dw);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructDataWriter_Narrow", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Narrow86(IntPtr dw);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructDataWriter_Write", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Write64(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In] ref TestStructWrapper data, int handle);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructDataWriter_Write", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Write86(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In] ref TestStructWrapper data, int handle);
        #endregion
    }

    public class TestStructDataReader : DataReader
    {
        #region Fields
        private new readonly IntPtr _native;
        #endregion

        #region Constructors
        public TestStructDataReader(DataReader dr) : base(dr.ToNative())
        {
            if (Environment.Is64BitProcess)
            {
                _native = Narrow64(base._native);
            }
            else
            {
                _native = Narrow86(base._native);
            }
        }
        #endregion

        #region Methods
        public ReturnCode Read()
        {
            if (Environment.Is64BitProcess)
            {
                ReturnCode ret = (ReturnCode)Read64(_native);
                if (ret == ReturnCode.Ok)
                {
                    // TODO
                }

                return ret;
            }
            else
            {
                ReturnCode ret = (ReturnCode)Read86(_native);
                if (ret == ReturnCode.Ok)
                {
                    // TODO
                }

                return ret;
            }
        }

        public ReturnCode ReadNextSample(TestStruct data)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            TestStructWrapper wrapper = new TestStructWrapper();
            if (Environment.Is64BitProcess)
            {                
                ret = (ReturnCode)ReadNextSample64(_native, ref wrapper);
                if (ret == ReturnCode.Ok)
                {
                    data.FromNative(wrapper);

                    // Always free the unmanaged memory.
                    // As the unmanaged memory was reserved in C++ we need a method to release it from C++.
                    Release64(ref wrapper);
                }

                return ret;
            }
            else
            {
                ret = (ReturnCode)ReadNextSample86(_native, ref wrapper);
                if (ret == ReturnCode.Ok)
                {
                    data.FromNative(wrapper);

                    // Always free the unmanaged memory.
                    // As the unmanaged memory was reserved in C++ we need a method to release it from C++.                    
                    Release86(ref wrapper);
                }
            }

            return ret;
        }
        #endregion

        #region PInvoke
        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructWrapper_release", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Release64([MarshalAs(UnmanagedType.Struct), In, Out] ref TestStructWrapper data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructWrapper_release", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Release86([MarshalAs(UnmanagedType.Struct), In, Out] ref TestStructWrapper data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructDataReader_Narrow", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Narrow64(IntPtr dw);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructDataReader_Narrow", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Narrow86(IntPtr dw);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructDataReader_Read", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Read64(IntPtr dr);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructDataReader_Read", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Read86(IntPtr dr);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X64, EntryPoint = "Test_TestStructDataReader_ReadNextSample", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadNextSample64(IntPtr dr, [MarshalAs(UnmanagedType.Struct), In, Out] ref TestStructWrapper data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(TestStruct.API_DLL_X86, EntryPoint = "Test_TestStructDataReader_ReadNextSample", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadNextSample86(IntPtr dr, [MarshalAs(UnmanagedType.Struct), In] ref TestStructWrapper data);
        #endregion
    }
    #endregion

}
